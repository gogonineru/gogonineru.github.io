<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gogonineru</title>
  
  
  <link href="https://gogonine.cn/atom.xml" rel="self"/>
  
  <link href="https://gogonine.cn/"/>
  <updated>2024-07-11T15:13:20.323Z</updated>
  <id>https://gogonine.cn/</id>
  
  <author>
    <name>Gogonineru</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python</title>
    <link href="https://gogonine.cn/posts/8bbfcc24.html"/>
    <id>https://gogonine.cn/posts/8bbfcc24.html</id>
    <published>2024-07-01T16:00:13.000Z</published>
    <updated>2024-07-11T15:13:20.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python">Python</h2><h3 id="第一章节-起步">第一章节 起步</h3><p>为什么 Python 可以省略掉 <code>;</code>？</p><p>追求语言的简洁性与可读性。若要一行多个语句则可以用 <code>;</code> 来隔开。</p><p>本地部署 chatgpt，等 ai 相关。</p><h3 id="第二章-变量和简单数据类型">第二章 变量和简单数据类型</h3><h4 id="变量名的命名规则">变量名的命名规则</h4><ul><li>可以用字母下划线开头，数字不行。</li><li>不能包含空格。</li><li>关键字和函数名无法作为变量名。</li><li>慎用 <code>I</code> 与 <code>O</code>，可能看作 <code>1</code> 与 <code>0</code>。</li></ul><h4 id="字符串">字符串</h4><p>在 Python 中用引号括起的都是字符串，单引号双引号都算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(变量名.title())</span><br><span class="line"><span class="comment"># 将字符串&quot;变量名&quot;每个首字母变大写。</span></span><br><span class="line"><span class="built_in">print</span>(变量名.upper())</span><br><span class="line"><span class="comment"># 输出大写，同上。</span></span><br><span class="line"><span class="built_in">print</span>(变量名.lower())</span><br><span class="line"><span class="comment"># 相反，输出小写。</span></span><br></pre></td></tr></table></figure><h4 id="f-format-使用">f, format 使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line"><span class="comment"># 组合名字</span></span><br><span class="line"></span><br><span class="line">full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 组合</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hello, <span class="subst">&#123;full_name.title()&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment"># 组合输出  结果为 Hello, Ada Lovelace!</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">f&quot;hello, <span class="subst">&#123;full_name.title()&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment"># 在变量中使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结</span></span><br><span class="line"><span class="comment"># 使用 f 时候 组合变量需要加 &#123;&#125;</span></span><br><span class="line"><span class="comment"># 字符与变量组合时，如果变量中 &#123;变量.title()&#125; 则字符也会使用到首字母大写的修改。</span></span><br></pre></td></tr></table></figure><h4 id="制表符或换行符来添加空白">制表符或换行符来添加空白</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\tPYTHON&quot;</span>)</span><br><span class="line"><span class="comment"># 制表符 输出空一格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;PYTHON:\n112\n333&quot;</span>)</span><br><span class="line"><span class="comment"># 换行符号 结果为 </span></span><br><span class="line"><span class="comment"># PYTHON:</span></span><br><span class="line"><span class="comment"># 112</span></span><br><span class="line"><span class="comment"># 333</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123\n\t412\n\t333&quot;</span>)</span><br><span class="line"><span class="comment"># 输出会空行+换行 结果为</span></span><br><span class="line"><span class="comment"># 123</span></span><br><span class="line"><span class="comment">#  412</span></span><br><span class="line"><span class="comment">#  333</span></span><br></pre></td></tr></table></figure><h4 id="删除空白">删除空白</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">language1 = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">language2 = <span class="string">&#x27;python&#x27;</span> </span><br><span class="line"><span class="comment"># python 会识别空格，无论前后。</span></span><br><span class="line"><span class="comment"># 利用 rstrip() 可以去除空格也就是将 language2 的值变为无空格的 python</span></span><br><span class="line"><span class="comment"># 具体 language2.strip() 结果就是无空格的 &#x27;python&#x27;</span></span><br><span class="line"><span class="comment"># 但只是表面删除 只能用于下一步的操作而不是全局</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要永久删除则需要关联到变量</span></span><br><span class="line"><span class="comment"># language2 = language2.rstrip()</span></span><br><span class="line"><span class="comment"># 就是让无空格的赋值盖掉之前的。</span></span><br><span class="line"><span class="comment"># 总结</span></span><br><span class="line"><span class="comment"># strip() 清除两边空格</span></span><br><span class="line"><span class="comment"># lstrip() 清除左侧</span></span><br><span class="line"><span class="comment"># rstrip() 清除右侧</span></span><br></pre></td></tr></table></figure><p>附加知识：</p><p>可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \&quot; 字符串或赋值的变量字符串 \&quot; 来添加引号</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;  \txiaoshangle\n       dsoax         &quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.strip())</span><br><span class="line"><span class="comment"># \n 后的内容是属于中间部分内容所以不会去除前面的空白</span></span><br></pre></td></tr></table></figure><h4 id="数">数</h4><p><code>**</code> 为次幂运算</p><h4 id="浮点数">浮点数</h4><p>小数</p><p>整数与浮点数一起运算时，结果都为浮点数。</p><h4 id="数中的下划线">数中的下划线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">14_000_000</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"><span class="comment"># 输出结果为 14000000</span></span><br><span class="line"><span class="comment"># 可以见 _ 不会打印出，会直接忽略</span></span><br><span class="line"><span class="comment"># 1000 也就是 1_000</span></span><br></pre></td></tr></table></figure><h4 id="同时给多个变量赋值">同时给多个变量赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="comment"># 用逗号隔开</span></span><br></pre></td></tr></table></figure><h4 id="常量">常量</h4><p>其值在整个程序的生命周期内，保持不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MAX_CONNECTIONS = <span class="number">5000</span></span><br><span class="line"><span class="comment"># 如果全大写指出某个变量视为常量</span></span><br><span class="line"><span class="comment"># 那么值始终不变</span></span><br><span class="line"><span class="comment"># 将特定的变量视为常量，那么可以将字母全大写</span></span><br></pre></td></tr></table></figure><h4 id="注释">注释</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向大家问好 用#注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment"># 只打印出 hello</span></span><br></pre></td></tr></table></figure><h3 id="Python之禅">Python之禅</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入 import this </span></span><br><span class="line"><span class="comment"># 优先选择简单</span></span><br><span class="line"><span class="comment"># 复杂代码也许有易理解，编写有益的注释</span></span><br><span class="line"><span class="comment"># 小问题存在于大空间，解决小问题的细节。</span></span><br><span class="line"><span class="comment"># 编写能运行的代码，在决定对其进行修改或者是废除创新。而不是编写完美的代码</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Python 之禅，作者 Tim Peters</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 美胜于丑。</span></span><br><span class="line"><span class="string">   - 写代码要追求美感，代码应当简洁、优雅。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 清晰胜于隐晦。</span></span><br><span class="line"><span class="string">   - 代码应当清晰明了，避免晦涩难懂。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 简单胜于复杂。</span></span><br><span class="line"><span class="string">   - 能用简单的方法解决问题，就不要用复杂的方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 复杂胜于混乱。</span></span><br><span class="line"><span class="string">   - 有时候问题本身很复杂，但代码应当保持有序。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5. 扁平胜于嵌套。</span></span><br><span class="line"><span class="string">   - 代码结构应当扁平化，避免过多的嵌套。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6. 稀疏胜于密集。</span></span><br><span class="line"><span class="string">   - 代码应当适度分散，避免过于紧凑。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7. 可读性很重要。</span></span><br><span class="line"><span class="string">   - 代码应该易于阅读和理解。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8. 特殊情况不足以破例。</span></span><br><span class="line"><span class="string">   - 特殊情况不应违反这些规则。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9. 实用比纯粹更重要。</span></span><br><span class="line"><span class="string">   - 实用性比纯粹的优雅更重要。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">10. 错误不应悄无声息，除非明确需要。</span></span><br><span class="line"><span class="string">    - 错误不应被默默忽略，除非明确地进行处理。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11. 面对不明确，拒绝猜测。</span></span><br><span class="line"><span class="string">    - 遇到不明确的情况，不要随意猜测。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12. 应该有一个显而易见的解决方法，最好只有一个。</span></span><br><span class="line"><span class="string">    - 应该有一个清晰明确的解决方法，并且最好只有一个。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">13. 虽然这种方法一开始可能不明显，除非你是荷兰人。</span></span><br><span class="line"><span class="string">    - 这种方法可能一开始并不明显，除非你非常熟悉 Python。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">14. 现在做比不做好。</span></span><br><span class="line"><span class="string">    - 现在动手比什么都不做要好。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">15. 虽然有时不做比匆忙做好。</span></span><br><span class="line"><span class="string">    - 有时候不做比草率完成要好。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">16. 如果实现难以解释，那可能不是好主意。</span></span><br><span class="line"><span class="string">    - 如果代码难以解释，可能不是好主意。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">17. 如果实现容易解释，那可能是好主意。</span></span><br><span class="line"><span class="string">    - 如果代码容易解释，可能是好主意。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">18. 命名空间是个好主意，我们应该多用。</span></span><br><span class="line"><span class="string">    - 命名空间是个非常好的设计理念，我们应多加利用。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="第三章-列表">第三章 列表</h3><p>列表由一系列按照特定顺序排列的元素组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="comment"># 用[]来表示列表，用,来分隔其中元素</span></span><br><span class="line"><span class="comment"># 打印出来为[&#x27;trek&#x27;, &#x27;cannondale&#x27;] 包括所有</span></span><br></pre></td></tr></table></figure><h4 id="访问列表元素">访问列表元素</h4><p>列表是有序集合，访问其中元素则需将索引告诉 Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 输出结果为 trek</span></span><br><span class="line"><span class="comment"># 当然能结合字符串方法使用利用 title() 变为首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>].title())</span><br><span class="line"><span class="comment"># 输出结果为 Trek # 0 就为索引</span></span><br></pre></td></tr></table></figure><p>索引从 0 开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 意思为列表中的第一个元素打印出来</span></span><br><span class="line"><span class="comment"># 如果为[1]则是打印出第二个元素</span></span><br></pre></td></tr></table></figure><h4 id="特殊索引">特殊索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 当索引为 -1 时，返回值为最后一个元素 -2 则是返回倒数第二个元素</span></span><br><span class="line"><span class="comment"># 如果没有元素 -1 则会报错</span></span><br></pre></td></tr></table></figure><h4 id="使用列表值">使用列表值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="comment"># 其中可以把 trek 这一看作为 bicycles[0] 使用</span></span><br><span class="line">message = <span class="string">f&quot;我的第一台车是<span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>&quot;</span> <span class="comment"># 类似变量的使用</span></span><br><span class="line"><span class="comment"># 输出结果为 我的第一台车为 Trek</span></span><br></pre></td></tr></table></figure><h4 id="修改列表元素">修改列表元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要改变第一个元素</span></span><br><span class="line"><span class="comment"># 则可以赋值新的</span></span><br><span class="line">bicycles[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span> </span><br><span class="line"><span class="comment"># 那么输出的 bicycles[0] 就变为了 aaa，bicycles 中的第一个元素也变为了 aaa</span></span><br></pre></td></tr></table></figure><h4 id="添加元素">添加元素</h4><h5 id="末尾添加">末尾添加</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="comment"># 则是在末尾添加了 aaa，利用 append</span></span><br><span class="line"><span class="comment"># bicycle 中的元素 [&#x27;trek&#x27;, &#x27;cannondale&#x27;, aaa]</span></span><br></pre></td></tr></table></figure><h5 id="创建空列表再利用-append-添加">创建空列表再利用 append() 添加</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bike = []</span><br><span class="line">bike.append(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">bike.append(<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(bike)</span><br><span class="line"><span class="comment"># 结果为 [&#x27;11&#x27;, &#x27;22&#x27;]</span></span><br></pre></td></tr></table></figure><h5 id="插入元素-利用-insert">插入元素 利用 insert()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bike = [<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;22&#x27;</span>]</span><br><span class="line">bike.insert(<span class="number">0</span>, <span class="string">&#x27;33&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出结果为 [&#x27;33&#x27;, &#x27;11&#x27;, &#x27;22&#x27;]</span></span><br><span class="line"><span class="comment"># 在索引 0 处添加空间并将 33 存储在索引 0，将每个元素都右移了</span></span><br></pre></td></tr></table></figure><h4 id="删除元素-并不使用-利用-del">删除元素 并不使用 利用 del</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bike 现在元素为 &#x27;33&#x27;, &#x27;11&#x27;, &#x27;22&#x27;</span></span><br><span class="line"><span class="comment"># 删除 &#x27;33&#x27;</span></span><br><span class="line"><span class="keyword">del</span> bike[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 删除索引[0]也就是第一个元素 33 同理索引[1]则是删除 11</span></span><br></pre></td></tr></table></figure><h4 id="删除列表元素-弹出-但是要用-利用-pop">删除列表元素(弹出) 但是要用 利用 pop()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bike = [<span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;22&#x27;</span>]</span><br><span class="line">poped_bike = bike.pop(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 弹出索引[0]也就是 &#x27;33&#x27;，并将弹出列表的值也就是 33 保存在 poped_bike 的变量中用来后面使用</span></span><br><span class="line"><span class="comment"># bike 列表中就剩 &#x27;11&#x27;, &#x27;22&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;33&#x27; 则被变量 poped_bike 保存并可以继续使用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我想买一辆 <span class="subst">&#123;poped_bike.title()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 任何元素都能被弹出 弹出索引[1]也就是弹出 &#x27;11&#x27; 弹出之后列表中的元素就没有了</span></span><br></pre></td></tr></table></figure><h4 id="根据值来删除元素">根据值来删除元素</h4><p>知道元素的值可以用 remove() 来删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bike = [<span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;11&#x27;</span>]</span><br><span class="line"><span class="comment"># 如果不知道索引位置那么可以直接用 remove(元素的值) 来删除</span></span><br><span class="line">bike.remove(<span class="string">&#x27;33&#x27;</span>)</span><br><span class="line">bike = [<span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;11&#x27;</span>]</span><br><span class="line"><span class="comment"># remove() 删除的元素的值还可以利用</span></span><br><span class="line"><span class="comment"># 比如将 &#x27;33&#x27; 存储在 a 中</span></span><br><span class="line">a = <span class="string">&#x27;33&#x27;</span></span><br><span class="line">bike.remove(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我删除的元素是 <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 注意事项</span></span><br><span class="line"><span class="comment"># 只能删除出现的第一个值 如果列表为 bike = [&#x27;33&#x27;, &#x27;33&#x27;]</span></span><br><span class="line"><span class="comment"># 使用 remove(&#x27;33&#x27;) 则是删去最前面的值</span></span><br></pre></td></tr></table></figure><h4 id="使用-sort-对列表进行永久排序">使用 sort() 对列表进行永久排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">cars.sort() <span class="comment"># 按照字母顺序排序 永久性修改</span></span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment"># 输出结果为 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="反向排序-用-reverse-True-也就是反向开启">反向排序 用 reverse=True 也就是反向开启</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>) <span class="comment"># 逆向排序，同样也是永久性</span></span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment"># 输出为 &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27; </span></span><br></pre></td></tr></table></figure><h4 id="使用-sorted-进行临时排序-当然也能用-sorted-reverse-True-进行临时逆向">使用 sorted() 进行临时排序 当然也能用 sorted(reverse=True) 进行临时逆向</h4><p>注意是内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也就是只作用于下一个</span></span><br><span class="line">cars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars, reverse=<span class="literal">True</span>)) <span class="comment"># 输出结果为 &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;</span></span><br><span class="line"><span class="comment"># 再次打印 </span></span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment"># 输出结果则是 &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; 回到原来的排序</span></span><br><span class="line"><span class="comment"># 如果  </span></span><br><span class="line"><span class="built_in">sorted</span>(cars, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment"># 没有进行逆向</span></span><br><span class="line"><span class="comment"># 结果为 &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="倒着打印用-reverse-也是永久性的-想要还原则在进行一次-reverse-的转换">倒着打印用 reverse() 也是永久性的 想要还原则在进行一次 reverse() 的转换</h4><p>注意：并不是按照字母顺序排列，而是反向排列列表中的元素</p><p>所以说 sort(reverse=True) 不等于 reverse()，前者字母顺序逆排，而后者则是直接逆排</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment"># 结果为 &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;</span></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment"># 输出结果则是 &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="确定列表长度-也就是有几个元素">确定列表长度 也就是有几个元素</h4><p>使用 len()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="built_in">len</span>(cars) <span class="comment"># 输出为 2</span></span><br></pre></td></tr></table></figure><h3 id="第四章-操作列表">第四章 操作列表</h3><h4 id="遍历整个列表-利用-for">遍历整个列表 利用 for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians: <span class="comment"># 获取 &#x27;a&#x27; 并与 magician 关联</span></span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br><span class="line">    <span class="comment"># 重复执行打印 从 magicians 中提出 magician 并且打印</span></span><br></pre></td></tr></table></figure><h4 id="for-中执行更多操作">for 中执行更多操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如说 三辆车 都说非常好</span></span><br><span class="line">cars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;car.title()&#125;</span> 非常好&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;我忍不住想要骑 <span class="subst">&#123;car.title()&#125;</span>\n&quot;</span>) <span class="comment"># 在循环中</span></span><br><span class="line">    <span class="comment"># 输出为</span></span><br><span class="line">    <span class="comment"># A非常好 我忍不住想要骑A</span></span><br><span class="line">    <span class="comment"># B非常好 我忍不住想要骑B</span></span><br><span class="line">    <span class="comment"># C非常好 我忍不住想要骑C</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这些车都非常好&quot;</span>) <span class="comment"># 循环结束后 没缩进</span></span><br></pre></td></tr></table></figure><h4 id="常见缩进错误">常见缩进错误</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for a in b</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># for 后 print 没缩进</span></span><br><span class="line"><span class="comment"># for a in b</span></span><br><span class="line"><span class="comment">#     print(a)</span></span><br><span class="line"><span class="comment"># print(f&quot;好 &#123;a&#125;&quot;)</span></span><br><span class="line"><span class="comment"># 忘记缩进第二行代码 导致只有 print(a) 进行了循环</span></span><br><span class="line">mes = <span class="string">&quot;ascx&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mes)</span><br><span class="line"><span class="comment"># 没必要的缩进 一般 for 后需要缩进</span></span><br><span class="line"><span class="comment"># for a in b</span></span><br><span class="line"><span class="comment">#     print(a)</span></span><br><span class="line"><span class="comment">#     print(f&quot;好 &#123;a&#125;&quot;)</span></span><br><span class="line"><span class="comment">#  print(&quot;非常好&quot;)   # 循环之后没有必要的缩进</span></span><br><span class="line"><span class="comment"># for a in b   # 漏了冒号</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h4 id="创建数值列表">创建数值列表</h4><p>存储各类数值 得分 温度等</p><p>使用 range() 值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):  <span class="comment"># 将 range 中的值传到变量 value</span></span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment"># 打印出 1, 2, 3, 4 没有 5   </span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment"># 需要打印 1~5 则是 range 后要 6</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment"># 单独使用左边为 0，所以是 0~5</span></span><br></pre></td></tr></table></figure><h4 id="list-与-range-来创建-数字列表">list() 与 range() 来创建 数字列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line"><span class="comment"># 创建一个 1~5 的数字列表</span></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"><span class="comment"># 输出为 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="可以指定步长">可以指定步长</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>)) <span class="comment"># 1~10 的偶数 从 2 开始 +2 导出</span></span><br><span class="line"><span class="built_in">print</span>(even_numbers)</span><br><span class="line"><span class="comment"># 结果为 [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h4 id="创建包含-1-10-的平方">创建包含 1~10 的平方</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    square = value**<span class="number">2</span> <span class="comment"># 1~10 每个数平方</span></span><br><span class="line">    squares.append(square) <span class="comment"># 将平方的值传给 squares 列表</span></span><br><span class="line"><span class="built_in">print</span>(squares) <span class="comment"># 打印出包含 1~10 平方的列表</span></span><br><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>) <span class="comment"># 不需要用临时变量 square</span></span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><h4 id="对数字列表进行简单统计计算">对数字列表进行简单统计计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">min</span>(digits) <span class="comment"># 最小</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="built_in">max</span>(digits) <span class="comment"># 最大</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="built_in">sum</span>(digits) <span class="comment"># 总和</span></span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure><h4 id="列表解析-一行代码搞定">列表解析 一行代码搞定</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)] </span><br><span class="line"><span class="comment"># 注意 for 后面没有:, for value in range(1, 11) 是为了给 value** 提供 value 值</span></span><br><span class="line"><span class="built_in">print</span>(squares) <span class="comment"># 打印出包含 1~10 平方的列表</span></span><br></pre></td></tr></table></figure><h3 id="使用列表中的一部分，处理列表部分元素，称为切片">使用列表中的一部分，处理列表部分元素，称为切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 打印出索引 0 到索引 2 的值</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># 打印出索引 1 到索引 2 的值</span></span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">3</span>]) <span class="comment"># 打印出索引 0 到索引 2 的值 左侧没有默认为 0</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:]) <span class="comment"># 打印出索引 2 到索引末尾的值</span></span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:]) <span class="comment"># 打印出最后三名队员</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>]) <span class="comment"># 每隔两个提取一个 打印出索引 0 索引 2</span></span><br></pre></td></tr></table></figure><h4 id="遍历切片">遍历切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:  <span class="comment"># 遍历出索引 0~2 三位</span></span><br><span class="line">    <span class="built_in">print</span>(player.title())</span><br></pre></td></tr></table></figure><h4 id="复制列表-利用">复制列表 利用 [:]</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">friend_foods = my_food[:] <span class="comment"># 我喜欢的食物复制给我朋友</span></span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">&#x27;e&#x27;</span>) <span class="comment"># 在我喜欢的添加到我 &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;e&#x27;</span></span><br><span class="line">friend_foods.append(<span class="string">&#x27;f&#x27;</span>) <span class="comment"># 朋友喜欢的添加到朋友 &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;f&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(friend_foods) <span class="comment"># 能够正确打印</span></span><br><span class="line">my_foods = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">friend_foods = my_food <span class="comment"># 这是不可行的 是将 my_foods 赋给了 friend_foods 而不是副本</span></span><br><span class="line">my_foods.append(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">friend_foods.append(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="comment"># 他们两可以看作在同一空间，同一物品，当其中一个改变，另一个也会随之改变 指向同一列表</span></span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br><span class="line"><span class="comment"># 打印都为 &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="元组-一系列不可修改的值称为不可变的，不可变的列表称为元组">元组 一系列不可修改的值称为不可变的，不可变的列表称为元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) <span class="comment"># ()而不是[]</span></span><br><span class="line"><span class="comment"># 假如大小不可改变的矩形</span></span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) <span class="comment"># 打印元组中索引 0 也就为 200</span></span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">dimensions[<span class="number">0</span>] = <span class="number">250</span> <span class="comment"># 会直接报错，因为元组无法被修改</span></span><br><span class="line"></span><br><span class="line">my_t = (<span class="number">3</span>,) <span class="comment"># 定义一个元组 必须要 ,</span></span><br></pre></td></tr></table></figure><h4 id="遍历元素">遍历元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: <span class="comment"># 像列表一样</span></span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure><h4 id="修改元组-重新定义元组">修改元组 重新定义元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) <span class="comment"># 为 200</span></span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">50</span>) </span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) <span class="comment"># 为 400</span></span><br></pre></td></tr></table></figure><h3 id="设置代码格式">设置代码格式</h3><h4 id="PEP-Python-改进提案">PEP (Python 改进提案)</h4><p>PEP 8 是最古老的 PEP 之一</p><p>易于阅读大于易于编写</p><h4 id="缩进">缩进</h4><p>PEP 8 建议每级缩进都使用四个空格 提高了可读性 留下了空间</p><p>Python 对于缩进比较敏感，所以建议使用制表符键来缩进代码，但与空格的混用会导致 Python 解释器出现问题。为解决，大多数编辑器提供将制表符转换为指定空格。避免混用问题。</p><h4 id="行长">行长</h4><p>79 字符标准行长 打开多个文件都能够阅读到</p><p>PEP 8 建议注释的行长不应超过 72 字符 有些工具为大型项目生成文档时，会在每行注释开头添加格式化字符。</p><h4 id="空行">空行</h4><p>也就是按下 enter 键，五行创建列表的代码，三行处理该列表的代码。中间可以用一个空行隔开最合适。不会影响代码运行，会影响可读性。</p><h4 id="其他格式指南">其他格式指南</h4><p>PEP 8 还有更多其他格式的设置建议，但所针对的程序都更复杂。</p><p>空格是首选的缩进方法。</p><h3 id="第五章-if-语句">第五章 if 语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">&#x27;b&#x27;</span>:  <span class="comment"># 判断是否是 b 是则输出 B，不是则是小写 a, c</span></span><br><span class="line">        <span class="built_in">print</span>(car.upper()) </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(car.lower())</span><br></pre></td></tr></table></figure><h4 id="条件测试">条件测试</h4><p>True 执行，False 不执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">car == <span class="string">&#x27;b&#x27;</span>  <span class="comment"># 检查 car 是否等于 b，等于则输出 True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">car == <span class="string">&#x27;a&#x27;</span> <span class="comment"># 不等于 输出 False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 一个等号就是将 car 设置为 b，两个等号就是问 car 是 b 吗？</span></span><br></pre></td></tr></table></figure><h4 id="检查是否相等大小写的影响">检查是否相等大小写的影响</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">car == <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="literal">False</span>        <span class="comment"># 大小写视为不通值</span></span><br><span class="line">car.upper() == <span class="string">&#x27;A&#x27;</span>   <span class="comment"># 将 car 中的值转化为大写 与 A 进行相等判断 网站判断用户名大小写</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="检查是否不相等">检查是否不相等</h4><p><code>!=</code> 其中感叹号为不</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">food = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">if</span> food != <span class="string">&#x27;b&#x27;</span>:         <span class="comment"># 不是 b 我不吃 为 True 输出我不吃</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我不吃&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="数值比较">数值比较</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">age == <span class="number">18</span>  <span class="comment"># 检测是否 18 岁</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="不相等时">不相等时</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age != <span class="number">19</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我不是 18 岁&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="条件语句">条件语句</h4><p>包含 &lt;, &gt;, =, &gt;=, &lt;=</p><h4 id="检查多个条件">检查多个条件</h4><p>两个为 True 整个为 True 用 and</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age_0 = <span class="number">22</span></span><br><span class="line">age_1 = <span class="number">18</span></span><br><span class="line">age_0 &gt;= age_1 <span class="keyword">and</span> age_0 &gt; <span class="number">22</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">age_0 == <span class="number">22</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">18</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 提高可读性</span></span><br><span class="line">(age_0 == <span class="number">22</span>) <span class="keyword">and</span> (age_1 &gt;= <span class="number">18</span>)</span><br></pre></td></tr></table></figure><h4 id="使用-or-检查">使用 or 检查</h4><p>两个为 False 则为 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age_0 = <span class="number">22</span></span><br><span class="line">age_1 = <span class="number">18</span></span><br><span class="line">age_0 &gt;= age_1 <span class="keyword">or</span> age_0 &gt; <span class="number">22</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">age_0 == <span class="number">22</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">18</span> <span class="comment"># 一个为 True 直接为 True</span></span><br><span class="line"><span class="literal">True</span> </span><br></pre></td></tr></table></figure><h4 id="检查特定值是否在列表-in">检查特定值是否在列表 in</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">car = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> car</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&#x27;e&#x27;</span> <span class="keyword">in</span> car</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="检查特定值不在列表-not-in">检查特定值不在列表 not in</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">car = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;c&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> car</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&#x27;d&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> car</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;d&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> car:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有 d 这台车&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="布尔表达式">布尔表达式</h4><p>要么为 True，要么为 False 记录条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">game_active = <span class="literal">True</span> <span class="comment"># 游戏是否在运行</span></span><br><span class="line">can_edit = <span class="literal">False</span> <span class="comment"># 用户是否能编辑特定内容</span></span><br></pre></td></tr></table></figure><h3 id="if-语句">if 语句</h3><h4 id="简单-if">简单 if</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional_test:     <span class="comment"># 满足 True 后 do something</span></span><br><span class="line">    do something</span><br><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:     <span class="comment"># 满足输出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you can go website&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;and can go sleep nightly&quot;</span>) <span class="comment"># 缩进 也能加多个一起输出</span></span><br></pre></td></tr></table></figure><h4 id="if-else-语句">if-else 语句</h4><p>通过执行一个操作 没有通过则执行另一个操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:     </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you can go website&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:    <span class="comment"># 也就是满足 age &lt; 18</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you can&#x27;t go website&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="if-elif-else-超过两个情形时">if elif else 超过两个情形时</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过年龄段收费的游乐园</span></span><br><span class="line"><span class="comment"># 4 岁以下免费 4~18 岁收费 25 元 18 岁以上收费 40 元</span></span><br><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you are free&quot;</span>)</span><br><span class="line">    <span class="comment"># price = 0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: <span class="comment"># age &lt;= 4 不通过时运行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you cost 25 yuan&quot;</span>)</span><br><span class="line">    <span class="comment"># price = 25</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you cost 40 yuan&quot;</span>)</span><br><span class="line">    <span class="comment"># price = 40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;你必须支付 <span class="subst">&#123;price&#125;</span> 元&quot;</span>)</span><br><span class="line"><span class="comment"># 使用 price 效率更高</span></span><br></pre></td></tr></table></figure><h4 id="使用多个-elif-代码块">使用多个 elif 代码块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    price = <span class="number">25</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">40</span></span><br><span class="line"><span class="keyword">else</span>:          <span class="comment"># 对于 65 岁以上老人半价</span></span><br><span class="line">    price = <span class="number">20</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;你需要话费 <span class="subst">&#123;price&#125;</span> 元&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="省略-else-代码块">省略 else 代码块</h4><p>在一些情况下 else 可以省略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    price = <span class="number">25</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">40</span></span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">65</span>:          <span class="comment"># 对于 65 岁以上老人半价 这样更好理解</span></span><br><span class="line">    price = <span class="number">20</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;你需要话费 <span class="subst">&#123;price&#125;</span> 元&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="If-elif-else-用于只有一个条件要满足的情况。多个条件要满足则用-if-更好">If-elif-else 用于只有一个条件要满足的情况。多个条件要满足则用 if 更好</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">requested_food = [<span class="string">&#x27;meat&#x27;</span>, <span class="string">&#x27;egg&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;meat&#x27;</span> <span class="keyword">in</span> requested_food:    <span class="comment"># 总体检测而不是一步一步检测 同时进行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adding meat&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;beef&#x27;</span> <span class="keyword">in</span> requested_food:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adding beef&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;egg&#x27;</span> <span class="keyword">in</span> requested_food:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adding egg&#x27;</span>)</span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings:    <span class="comment"># 条件满足则直接导出而不会进行下一步</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding mushrooms.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;pepperoni&#x27;</span> <span class="keyword">in</span> requested_toppings:    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding pepperoni.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;extra cheese&#x27;</span> <span class="keyword">in</span> requested_toppings:    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding extra cheese.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="if-来处理列表">if 来处理列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有 a 了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;可以购买&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="确定列表不是空的列表">确定列表不是空的列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars = []    <span class="comment"># 空的列表会输出 False</span></span><br><span class="line"><span class="keyword">if</span> cars:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;还有&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无了&#x27;</span>)    <span class="comment"># 输出无了则是空</span></span><br></pre></td></tr></table></figure><h4 id="使用多个列表">使用多个列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cars1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] </span><br><span class="line">cars2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]    <span class="comment"># 所需要的</span></span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars2:        <span class="comment"># 遍历所需的</span></span><br><span class="line">    <span class="keyword">if</span> car <span class="keyword">in</span> cars1:    <span class="comment"># 如果 car1 列表中有 car2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;有 <span class="subst">&#123;car&#125;</span>&#x27;</span>) <span class="comment"># 有 a, b</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有&#x27;</span>)  <span class="comment"># 因为没有 e 所以打印没有</span></span><br></pre></td></tr></table></figure><h3 id="设置-if-语句格式">设置 if 语句格式</h3><p>在比较运算符左右侧加空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">复制代码</span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br></pre></td></tr></table></figure><h3 id="第六章-字典">第六章 字典</h3><h4 id="简单的字典">简单的字典</h4><p>用 <code>&#123;&#125;</code> <code>:</code> 创建字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line"><span class="comment"># 输出为 green 和 5</span></span><br></pre></td></tr></table></figure><p>使用字典 一个键值对 一个键对一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment"># 其中 color 为键 green 为值 描述为颜色是绿色</span></span><br></pre></td></tr></table></figure><h4 id="访问字典中的值">访问字典中的值</h4><p>利用 <code>[键]</code> 来访问值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">newalien_0 = alien_0[<span class="string">&#x27;color&#x27;</span>] <span class="comment"># 用变量存储</span></span><br><span class="line"><span class="built_in">print</span>(newalien_0) <span class="comment"># 输出为 green</span></span><br></pre></td></tr></table></figure><h4 id="添加键值对">添加键值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span>    <span class="comment"># [内的是键] = 值</span></span><br><span class="line"><span class="built_in">print</span>(alien_0) <span class="comment"># 打印出 alien_0 = &#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5, &#x27;x_position&#x27;: 0, &#x27;y_position&#x27;: 25&#125;</span></span><br></pre></td></tr></table></figure><h4 id="创建空字典-再添加键值对">创建空字典 再添加键值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">alien_0[<span class="string">&#x27;points&#x27;</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="修改字典中的值">修改字典中的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span> <span class="comment"># 根据键去改</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)     <span class="comment"># &#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;points&#x27;: 5&#125;</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;x_position&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;y_position&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Original position: <span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>) </span><br><span class="line"><span class="comment"># 向右移动外星人。  </span></span><br><span class="line"><span class="comment"># 根据当前速度确定将外星人向右移动多远。</span></span><br><span class="line"><span class="keyword">if</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;slow&#x27;</span>:      </span><br><span class="line">    x_increment = <span class="number">1</span>  </span><br><span class="line"><span class="keyword">elif</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;medium&#x27;</span>:      </span><br><span class="line">    x_increment = <span class="number">2</span>  </span><br><span class="line"><span class="keyword">else</span>:            </span><br><span class="line">    x_increment = <span class="number">3</span>  </span><br><span class="line"><span class="comment"># 新位置为旧位置加上移动距离。</span></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = alien_0[<span class="string">&#x27;x_position&#x27;</span>] + x_increment</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;New position: <span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="删除键值对">删除键值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;points&#x27;</span>] <span class="comment"># 删除 point 键并且值也对应被删除</span></span><br></pre></td></tr></table></figure><h4 id="类对象组成的字典">类对象组成的字典</h4><p>之前是存储一个对象(外星人)的多种信息，也能使用字典来存储众多对象的同一信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">favorite_language = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">lag = favorite_language[<span class="string">&#x27;b&#x27;</span>] <span class="comment"># 利用变量存储 打印代码更简洁</span></span><br></pre></td></tr></table></figure><h4 id="使用-get-来访问值">使用 get() 来访问值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>]) <span class="comment"># 可见 alien_0 中没有 point 这一键</span></span><br></pre></td></tr></table></figure><p>作用也就是来测试 points 存不存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">point_value = alien_0.get(<span class="string">&#x27;points&#x27;</span>, <span class="string">&#x27;No point value assigned.&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用 get( , ) 前面为指定键，后者则为指定键不存在返回的值</span></span><br><span class="line"><span class="comment"># 也就是不会直接报错 而是会返回这个不存在 后者不存在则会返回 none</span></span><br><span class="line"><span class="comment"># 如果有 points 那么不会返回</span></span><br><span class="line"><span class="built_in">print</span>(point_value)</span><br></pre></td></tr></table></figure><h4 id="遍历字典">遍历字典</h4><h5 id="遍历所有键值对">遍历所有键值对</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;      </span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>,      </span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>,      </span><br><span class="line">    <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>,      </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items():   <span class="comment"># 申明两个变量 key 对应键，value 对应值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nKey: <span class="subst">&#123;key&#125;</span>&quot;</span>)           <span class="comment"># 两个变量可以根据相应的键和值来修改</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Value: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="遍历所有键">遍历所有键</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;      </span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>,      </span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>,      </span><br><span class="line">    <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>,      </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> user_0:            <span class="comment"># 直接一个变量 就能遍历键 </span></span><br><span class="line">    <span class="comment"># for key in user_0.keys():           # 或者加一个 .keys 便于理解</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nKey: <span class="subst">&#123;key&#125;</span>&quot;</span>)       </span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> user_0.keys():</span><br><span class="line">        <span class="built_in">print</span>()       <span class="comment"># 确实是否在字典中</span></span><br><span class="line"></span><br><span class="line">user_1 = &#123;<span class="string">&#x27;first&#x27;</span>: <span class="number">21</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">in</span> user_1:</span><br><span class="line">    <span class="built_in">print</span>()        <span class="comment"># 对于特定的键来打印</span></span><br></pre></td></tr></table></figure><h5 id="按特定顺序遍历键">按特定顺序遍历键</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;    </span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,    </span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,   </span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()): <span class="comment"># 利用 sorted()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name.title()&#125;</span> 的最喜欢的语言是 <span class="subst">&#123;favorite_languages[name].title()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="遍历所有值">遍历所有值</h5><p>利用 <code>.values()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;    </span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,    </span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,   </span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():     </span><br><span class="line">    <span class="built_in">print</span>(language)  <span class="comment"># 遍历所有值</span></span><br></pre></td></tr></table></figure><p>没有考虑到重复，涉及多了则会有大量重复项，使用集合 (set)。集合中每个元素都必须是独一无二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;    </span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,    </span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,   </span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):    <span class="comment"># 利用 set() 来创建集合     </span></span><br><span class="line">    <span class="built_in">print</span>(language)  <span class="comment"># 遍历所有值 利用 set 后没有重复语言结果为 &#x27;python&#x27;, &#x27;c&#x27;, &#x27;ruby&#x27;</span></span><br></pre></td></tr></table></figure><p>可以用一对花括号直接创建集合，并在其中用逗号分隔元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">languages = &#123;<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(languages)  <span class="comment"># 输出结果为 &#x27;python&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套">嵌套</h3><p>将字典存储在列表，或者将列表的值存储在字典，称为嵌套。</p><h4 id="字典列表">字典列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">a_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">a_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125;</span><br><span class="line">aliens = [a_0, a_1, a_2] <span class="comment"># 用列表存储字典</span></span><br><span class="line"><span class="built_in">print</span>(aliens)</span><br><span class="line"><span class="comment"># 结果为</span></span><br><span class="line"><span class="comment"># &#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;points&#x27;: 10&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;points&#x27;: 15&#125;</span></span><br><span class="line"><span class="comment"># 创建存储外星人空列表</span></span><br><span class="line">aliens = []</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">    aliens.append(alien)  <span class="comment"># 添加 30 个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(alien)  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(aliens)) <span class="comment"># 检查创建了多少个外星人</span></span><br></pre></td></tr></table></figure><p>每个外星人都是独立的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aliens = []</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">    aliens.append(alien)  <span class="comment"># 添加 30 个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">3</span>]:  <span class="comment"># 更改前三个星人的键值</span></span><br><span class="line">    <span class="keyword">if</span> alien[<span class="string">&#x27;color&#x27;</span>] == <span class="string">&#x27;green&#x27;</span>:     <span class="comment"># 颜色是绿色的则修改</span></span><br><span class="line">        alien[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;speed&#x27;</span>] = <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;points&#x27;</span>] = <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="在字典中存储列表">在字典中存储列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储所点披萨的信息。</span></span><br><span class="line">pizza = &#123;</span><br><span class="line">    <span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>]  <span class="comment"># 列表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(topping) <span class="comment"># 打印出 mushrooms, extra cheese</span></span><br><span class="line">favorite_languages = &#123;         </span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>],      </span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>],      </span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: [<span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;go&#x27;</span>],      </span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;haskell&#x27;</span>],      <span class="comment"># 使用列表存储值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():      </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;name.title()&#125;</span>&#x27;s favorite languages are:&quot;</span>)   <span class="comment"># 打印</span></span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:          <span class="comment"># 从字典中的值提取 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\t<span class="subst">&#123;language.title()&#125;</span>&quot;</span>)    <span class="comment"># 输出位后面的值 python, ruby 等等</span></span><br></pre></td></tr></table></figure><h4 id="字典中存储字典">字典中存储字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 users 中提取键值</span></span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nUsername: <span class="subst">&#123;username&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印出 users 中值的键中的 first 和 last 中所对应的值</span></span><br><span class="line">    <span class="comment"># 也就是 albert 和 einstein 以及 marie 和 curie</span></span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;user_info[<span class="string">&#x27;first&#x27;</span>]&#125;</span> <span class="subst">&#123;user_info[<span class="string">&#x27;last&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\tFull name: <span class="subst">&#123;full_name.title()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印出 users 中 location 键对应的值</span></span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\tLocation: <span class="subst">&#123;location.title()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="常见问题">常见问题</h3><ol><li><strong>缺少逗号</strong>：定义字典时每个子字典之间有逗号</li><li><strong>items() 少括号</strong>：遍历时老师忘记括号</li></ol><h3 id="第七章-用户输入和while循环">第七章 用户输入和while循环</h3><h4 id="函数input-让程序暂停运行，等待用户输入一些文本">函数input() 让程序暂停运行，等待用户输入一些文本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="built_in">input</span>(<span class="string">&quot;Tell me something,and I will repeat it back to you:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>input()接受一个参数——向用户显示提示(prompt)或说明，用户根据提示照做之后，按下回车键后会将输入的数据存储在message中，之后用print(message)可以清除的打印</p><h4 id="编写清晰的程序">编写清晰的程序</h4><p>使用input(),应该清除的指示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;please enter your name:&quot;</span>)    <span class="comment">#让用户输入，内存存储在name     </span></span><br><span class="line"><span class="built_in">print</span>(name)      <span class="comment">#打印出用户输入的内容</span></span><br></pre></td></tr></table></figure><p>需要多行提示，可以用变量来存储提示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span>   <span class="comment">#将提示存储在prompt中 附加存储</span></span><br><span class="line"><span class="comment">#问号后的空格也是为了更加清晰</span></span><br><span class="line">name = <span class="built_in">input</span>(prompt)    <span class="comment">#存储后的提示更加能清晰的要求用户输入什么</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nHello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="使用int-来获取数值输入">使用int()来获取数值输入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;How old are you&quot;</span>)</span><br><span class="line"><span class="comment">#用户输入21</span></span><br><span class="line">age</span><br><span class="line"><span class="string">&#x27;21&#x27;</span>    <span class="comment">#返回的是一个字符串</span></span><br></pre></td></tr></table></figure><p>需要将字符串转化为数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#则用int()</span></span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;How old are you&quot;</span>)</span><br><span class="line"><span class="comment">#用户输入21</span></span><br><span class="line">age=<span class="built_in">int</span>(age)</span><br><span class="line"><span class="comment">#age变为数值的21，而不是字符串</span></span><br></pre></td></tr></table></figure><p>使用int()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;How old are you&quot;</span>)  <span class="comment">#让用户输入</span></span><br><span class="line">age = <span class="built_in">int</span>(age)  <span class="comment">#转化为数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:           <span class="comment">#数值之间的比较</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不许进入&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    pritn(<span class="string">&quot;允许进入&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="求模运算符">求模运算符</h4><p>处理数值信息，求模运算符%很有用，也就是取余</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">4</span> % <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">5</span> % <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>可用这个来判断奇偶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="built_in">input</span>(<span class="string">&quot;我来告诉你输入的数字是奇数还是偶数，输入一个数字：&quot;</span>)</span><br><span class="line">number = <span class="built_in">int</span>(number)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;number&#125;</span>是偶数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;number&#125;</span>是奇数&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="while循环">while循环</h4><p>for循环是条件满足执行一次，而while循环则是条件满足一直执行，到不满足为止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current_number</span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:     </span><br><span class="line">    <span class="built_in">print</span>(current_number)      <span class="comment">#输出到5位置</span></span><br><span class="line">    current_number += <span class="number">1</span>      <span class="comment">#输出为5下一步在加1 那么就是6就不继续循环</span></span><br></pre></td></tr></table></figure><h4 id="让用户选择何时退出">让用户选择何时退出</h4><p>定义一个’quit’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;how old are you:&quot;</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span>   <span class="comment">#在循环外增加message变量，空字符串</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>:     <span class="comment">#当用户不输入quit的时候进行循环</span></span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>但是这个代码当输入quit时，也会打印出quit ，只需要简单的if</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;how old are you:&quot;</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span>   <span class="comment">#在循环外增加message变量，空字符串</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>:     <span class="comment">#当用户不输入quit的时候进行循环</span></span><br><span class="line">    message = <span class="built_in">input</span>(prompt)   <span class="comment">#输入quit时还会打印出quit，因为内部先执行</span></span><br><span class="line">    <span class="comment">#print(message)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> message !=<span class="string">&#x27;quit&#x27;</span>:  <span class="comment">#意思是当用户输入quit的时候也是输出message</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h4 id="使用标志">使用标志</h4><p>可以使用一个变量，来判断整个程序是否处于活动状态。这个变量称为标志。还是有关于退出的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span>  </span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> message = <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        active = <span class="literal">False</span>       <span class="comment">#False时会退出循环</span></span><br><span class="line">    <span class="keyword">else</span>:                     <span class="comment">#不是quit就继续执行</span></span><br><span class="line">    <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><h4 id="使用break退出循环">使用break退出循环</h4><p>当用户输入了’quite’之后直接用break退出循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span>  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    <span class="keyword">if</span> message = <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>注意:在任何Python循环中都可使用break语句。例如，可使用break语句来退出遍历列表或字典的for循环。</p><h4 id="在循环中使用continue">在循环中使用continue</h4><p>返回循环开头，并根据条件测试结果决定是否继续执行，使用continue</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> current &lt; <span class="number">10</span>:</span><br><span class="line">    current_number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span>               <span class="comment">#当current_number为偶数时，会直接回到主循环，不进行打印</span></span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h4 id="避免无限循环">避免无限循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)     <span class="comment">#一直为True 一直循环 一般Ctral+C可以退出循环</span></span><br></pre></td></tr></table></figure><p>所以程序必须要有个东西能够跳出循环</p><h4 id="使用while来处理列表和字典">使用while来处理列表和字典</h4><h4 id="在列表之间移动元素">在列表之间移动元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uncon = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">con = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> uncon:         <span class="comment">#当有不信任用户时</span></span><br><span class="line">    cur = uncon.pop()       <span class="comment">#弹出赋值给cur</span></span><br><span class="line">     </span><br><span class="line">    con.append(cur)       <span class="comment">#讲弹出的值添加到信任列表</span></span><br></pre></td></tr></table></figure><p>他是从末尾开始的，即是’c’开始删除或者，转移</p><h4 id="删除为特定值的所有元素">删除为特定值的所有元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pets = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(pets)         <span class="comment">#我需要删除所有猫</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets: <span class="comment">#当&#x27;cat&#x27;在列表的时候进入循环删除&#x27;cats&#x27;,直到不再有cat</span></span><br><span class="line">    remove(<span class="string">&#x27;cat&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="用户输入来填充字典">用户输入来填充字典</h4> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">responses = &#123;&#125;  <span class="comment">#建立空字典</span></span><br><span class="line">active = <span class="literal">True</span>  <span class="comment">#设置标志</span></span><br><span class="line"><span class="keyword">while</span> acitve:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name?&quot;</span>)</span><br><span class="line">    <span class="comment">#输入的姓名存在name</span></span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&quot;Which mountain would you like to climb someday&quot;</span>)</span><br><span class="line">    <span class="comment">#回答存在response</span></span><br><span class="line">    </span><br><span class="line">    responses[name] = response <span class="comment">#将键name 和值 response 存在字典中</span></span><br><span class="line">    </span><br><span class="line">    repeat = <span class="built_in">input</span>(<span class="string">&#x27;Would you like to let another person respons(yes/no)&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">        active = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#调查结束 显示结果也就是将responses字典遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,response <span class="keyword">in</span> responses.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> would like to climb<span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="第8章-函数">第8章 函数</h3><p>是代名字的代码块,用于完成具体的工作。</p><h4 id="定义函数">定义函数</h4><p>利用def 函数定义 记得加:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():      <span class="comment">#括号内也能写要达到什么样的效果</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单问候语。&quot;&quot;&quot;</span>    <span class="comment">#文档字符串，三引号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greatt_user()  <span class="comment">#调用只需要输入这个，会打印出hello！ 函数调用</span></span><br><span class="line">     </span><br></pre></td></tr></table></figure><h4 id="向函数传递信息">向函数传递信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">username</span>):          <span class="comment">#调用时可以给变量username一个值</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单问候语。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;hello,<span class="subst">&#123;username.title()&#125;</span>!&quot;</span>)     <span class="comment">#根据调用给的username打印</span></span><br><span class="line">greet_user(<span class="string">&#x27;jesse&#x27;</span>)     <span class="comment">#调用函数greet_user并在括号内让username=&#x27;jesse&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="实参和形参">实参和形参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;hello,<span class="subst">&#123;username.title()&#125;</span>!&quot;</span>) </span><br><span class="line">greet_user(<span class="string">&#x27;jesse&#x27;</span>) </span><br><span class="line">  </span><br><span class="line"><span class="comment">#username为形参，&#x27;jesse&#x27;为实参。</span></span><br><span class="line"><span class="comment">#调用时将实参传递给函数greet_user,赋给了形参username</span></span><br></pre></td></tr></table></figure><h4 id="传递实参">传递实参</h4><p>函数定义中可能包括多个实参，向函数传递实参的方式也会很多：可使用位置实参，要求实参的顺序和形参顺序相同；也能使用关键字实参，其中每个实参都由变量名和值组成；还可使用列表和字典。</p><h4 id="位置实参">位置实参</h4><p>调用函数时，每个实参都关联到函数定义中的一个形参。最简单的方式是基于实参的顺序，这种关联方式称为位置实参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">des_pet</span> &#123;animal_type,pet_name&#125;:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My<span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">des_pet(<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;harry&#x27;</span>)  <span class="comment">#按顺序传入到形参</span></span><br></pre></td></tr></table></figure><h5 id="多次调用">多次调用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">des_pet</span> &#123;animal_type,pet_name&#125;:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My<span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">des_pet(<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;harry&#x27;</span>)  <span class="comment">#按顺序传入形参</span></span><br><span class="line">des_pet(<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;willie&#x27;</span>)  <span class="comment">#与第一次一样</span></span><br></pre></td></tr></table></figure><h4 id="位置实参的顺序很重要">位置实参的顺序很重要</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">des_pet</span> &#123;animal_type,pet_name&#125;:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My<span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">des_pet(<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;harry&#x27;</span>)  <span class="comment">#按顺序传入到形参</span></span><br></pre></td></tr></table></figure><p>按照形参的类型，按照顺序将实参传入到形参</p><h4 id="关键字实参">关键字实参</h4><p>关键字实参是传递给函数的名称值对。直接在实参中将名称与值关联，所以更加的清晰。也不需要考虑顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">des_pet</span> &#123;animal_type,pet_name&#125;:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My<span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>&quot;</span>)</span><br><span class="line">des_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>,pet_name=<span class="string">&#x27;harry&#x27;</span>) <span class="comment">#关键字实参</span></span><br><span class="line"><span class="comment">#将实参直接赋值给形参 位置随意</span></span><br></pre></td></tr></table></figure><h4 id="默认值">默认值</h4><p>编写函数，可给每个形参指定默认值。如果在调用函数的时候没有给形参提供实参，那么直接会使用形参的默认值。</p><p>发现描述的大多是小狗，而不知到他的名字。就能使用默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">des_pet</span> &#123;pet_name,animal_type=<span class="string">&#x27;dog&#x27;</span>,&#125;:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My<span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">des_pet(pet_name=<span class="string">&#x27;hamster&#x27;</span>)  </span><br><span class="line">des_pet(<span class="string">&#x27;hamster&#x27;</span>)       <span class="comment">#默认为顺序实参，所以传入pet_name。</span></span><br></pre></td></tr></table></figure><p>注意: 使用默认值时，必须先在形参列表中列出没有默认值的形参，再列出有默认值的实参。这让Python依然能够正确地解读位置实参。如果位置不准确也能够使用关键字实参。</p><h4 id="等效的函数调用">等效的函数调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">des_pet</span> &#123;pet_name,animal_type=<span class="string">&#x27;dog&#x27;</span>,&#125;:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My<span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">des_pet(pet_name=<span class="string">&#x27;hamster&#x27;</span>)  </span><br><span class="line">des_pet(<span class="string">&#x27;hamster&#x27;</span>)       <span class="comment">#默认为顺序实参，所以传入pet_name。</span></span><br></pre></td></tr></table></figure><p>如上，可使用关键字实参和顺序实参。总的来说，只要能够生成期望的输出，使用最容易理解的调用方式即可。</p><h4 id="避免实参错误">避免实参错误</h4><p>使用函数后，如遇实参不匹配错误，不用大惊小怪。如果调用函数的时候，实参多余或者是少于目标的形参，那么都会报错。traceback会指出错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">des_pet</span> &#123;pet_name,animal_type=<span class="string">&#x27;dog&#x27;</span>,&#125;:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;My<span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#des_pet()   #错误</span></span><br><span class="line"><span class="comment">#TypeError: des_pet() missing 2 required positional arguments: &#x27;animal_  type&#x27; and &#x27;pet_name&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="返回值">返回值</h4><p>函数返回的值称为返回值。可使用return语句返回到调用函数代码行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">first_name,last_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span><span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()      </span><br><span class="line">musician = get_name(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>)   <span class="comment">#将返回值赋予musician</span></span><br><span class="line">pring(musician) <span class="comment">#输出为JimiXx</span></span><br></pre></td></tr></table></figure><h4 id="让实参变为可选的">让实参变为可选的</h4><p>可使用默认值让实参变为可选的</p><p>有时有人有中间名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">first_name,middle_name,last_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span><span class="subst">&#123;niddle_name&#125;</span><span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()      </span><br><span class="line">musician = get_name(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>，<span class="string">&#x27;ss&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(musician) <span class="comment">#结果为JimiXxSs</span></span><br></pre></td></tr></table></figure><p>但是不是每个人都有的，如果只给两个实参则会报错，那么需要对middle_name给一个空字符串后置.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">first_name,last_name,middle_name=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span><span class="subst">&#123;middle_name&#125;</span><span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()      </span><br><span class="line">musician = get_name(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;ss&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician) <span class="comment">#结果为JimiXxSs</span></span><br><span class="line">musician = get_name(<span class="string">&#x27;ao&#x27;</span>,<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician) <span class="comment">#那么结果为AoX 因为没有实参进入middle_name所以使用默认值</span></span><br></pre></td></tr></table></figure><h4 id="返回字典">返回字典</h4><p>函数可返回任何类型的值，包括列表字典，和复杂的数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name,last_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关的一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">    person = &#123;<span class="string">&#x27;first&#x27;</span>:first_name,<span class="string">&#x27;last&#x27;</span>:last_name&#125;</span><br><span class="line">    <span class="keyword">return</span> person       <span class="comment">#将person的内容返回到函数中</span></span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"><span class="comment">#输出结果为字典 &#123;&#x27;first&#x27;:&#x27;jimi&#x27;,&#x27;last&#x27;:&#x27;xx&#x27;&#125; 也就是将实参的值到了字典的值中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面的修改能够存储年龄</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name,last_namem,age=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关的一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">    person = &#123;<span class="string">&#x27;first&#x27;</span>:first_name,<span class="string">&#x27;last&#x27;</span>:last_name&#125;</span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person(<span class="string">&#x27;age&#x27;</span>)=age      <span class="comment">#也就是增加了年龄的键值对在person中</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> person       <span class="comment">#将person的内容返回到函数中</span></span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;xx&#x27;</span>，age=<span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"><span class="comment">#函数中新增 可选参age，默认值设为特殊的None。在条件测试中None相当于False。也就是不执行，当实参中含有如age=27 那么在形参中age=27 那么就为True 执行在字典中加入&#x27;age&#x27;:27</span></span><br></pre></td></tr></table></figure><h4 id="结合函数与while循环">结合函数与while循环</h4><p>可将函数与前面介绍的任何python结构结合使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">first_name,last_name</span>):</span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span><span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me you name:&quot;</span>)</span><br><span class="line">    f_name = <span class="built_in">input</span>(<span class="string">&quot;First name:&quot;</span>)</span><br><span class="line">    l_name = <span class="built_in">input</span>(<span class="string">&#x27;Last name:&#x27;</span>)</span><br><span class="line">    <span class="comment">#叫用户输入他们的姓名</span></span><br><span class="line">    </span><br><span class="line">    formatted_name = get_name(f_name,l_name) <span class="comment">#函数调用，将用户输入的变为实参</span></span><br><span class="line">    <span class="built_in">print</span>(formatted_name) <span class="comment">#输出也就是用户输入的名字</span></span><br></pre></td></tr></table></figure><p>但这没有退出,在用户输入姓名的时候增加退出可选项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">first_name,last_name</span>):</span><br><span class="line">    full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span><span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me you name:&quot;</span>)</span><br><span class="line">    f_name = <span class="built_in">input</span>(<span class="string">&quot;First name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name ==<span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l_name = <span class="built_in">input</span>(<span class="string">&#x27;Last name:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name ==<span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#叫用户输入他们的姓名</span></span><br><span class="line">    </span><br><span class="line">    formatted_name = get_name(f_name,l_name) <span class="comment">#函数调用，将用户输入的变为实参</span></span><br><span class="line">    <span class="built_in">print</span>(formatted_name) <span class="comment">#输出也就是用户输入的名字</span></span><br></pre></td></tr></table></figure><p>在用户输入姓名的时候输入q那么就会退出循环</p><h4 id="传递列表">传递列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#假设一个用户列表，问候每位用户。以下将列表传递给函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_users</span>(<span class="params">names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;向列表中每位用户发出简单的问候&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:       <span class="comment">#遍历</span></span><br><span class="line">        msg = <span class="string">f&quot;hello,<span class="subst">&#123;name.title()&#125;</span>!&quot;</span> <span class="comment">#发出问候并赋值给msg</span></span><br><span class="line">        <span class="built_in">print</span>(msg) <span class="comment">#打印出msg</span></span><br><span class="line"></span><br><span class="line">usernames = [<span class="string">&#x27;hahaha&#x27;</span>,<span class="string">&#x27;ty&#x27;</span>,<span class="string">&#x27;margot&#x27;</span>]  <span class="comment">#创建列表usernames</span></span><br><span class="line">greet_users(usernames)   <span class="comment">#调用函数将实参列表传入到形参names中</span></span><br></pre></td></tr></table></figure><h4 id="修改列表">修改列表</h4><p>列表传递给函数后，函数就能对其进行永久性的修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3D打印， 打印完成后移动到另一个列表</span></span><br><span class="line"><span class="comment">#首先创建列表</span></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;phone case&#x27;</span>,<span class="string">&#x27;robot pendant&#x27;</span>,<span class="string">&#x27;dodecahedron&#x27;</span>] <span class="comment">#打印的列表</span></span><br><span class="line">completed_models = [] <span class="comment">#打印完成的列表，也就是目标移动列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unprinted_designs:</span><br><span class="line">    current_design = unprinted_design.pop()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Printing Model:<span class="subst">&#123;current_design&#125;</span>&quot;</span>)</span><br><span class="line">    completed_models.append(current_design)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n The following models have been printed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">    <span class="built_in">print</span>(completed_model)</span><br></pre></td></tr></table></figure><p>将步骤填入函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建两个函数 一个负责移动元素，另一个负责打印</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_models</span>(<span class="params">unprinted_designs,completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟打印每个设计，知道没有未打印的设计为止.</span></span><br><span class="line"><span class="string">    打印每个设计后，将其移动到completed_models中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Printing model:<span class="subst">&#123;current_design&#125;</span>&quot;</span>)</span><br><span class="line">        completed_models.append(current_design)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_completed_models</span>(<span class="params">completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示打印所有模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n THE following moedels have been printed:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        <span class="built_in">print</span>(completed_model)</span><br><span class="line">unprinted_designs = [<span class="string">&#x27;phone case&#x27;</span>,<span class="string">&#x27;robor pendant&#x27;</span>,<span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line">print_models(unprinted_designs)    <span class="comment">#调用第一个函数将unprinted_designs中的元素传给completed_models</span></span><br><span class="line">show_completed_models(completed_models) <span class="comment">#因为上一个completed_models中就有值了，调用第二个函数模型将里面的值遍历出来</span></span><br></pre></td></tr></table></figure><p>禁止函数修改列表</p><p>使用函数移动列表元素是将原件移动，原来的列表会消失，所以可以用副本而不是原件来保留原件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function_name(list_name_[:])  <span class="comment">#创建副本</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_models(unprinted_designs[:],completed_models)</span><br><span class="line"><span class="comment">#这样调用print_models函数能够让unprinted_designs的值不会传递，而是利用[:]副本来传递给completed_models</span></span><br></pre></td></tr></table></figure><p>pop()默认逆向弹出需要用pop(0)</p><h4 id="传递任意数量的实参">传递任意数量的实参</h4><p>*创建元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>):  <span class="comment">#利用*创建空元组</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(toppings)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment">#可以传一个</span></span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>) <span class="comment">#也可以传多个</span></span><br></pre></td></tr></table></figure><p>print替换成循环来对顾客点的披萨进行描述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的披萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n Makeing a pizza whith the following toppings&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;- <span class="subst">&#123;topping&#125;</span>&quot;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment">#可以传一个</span></span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>) <span class="comment">#也可以传多个</span></span><br><span class="line"><span class="comment">#最终打印函数能够妥善处理，无论多少个实参</span></span><br></pre></td></tr></table></figure><h4 id="结合使用位置实参和任意数量实参">结合使用位置实参和任意数量实参</h4><p>也就是多个形参时，匹配位置实参和关键字实参。元组实参放后边。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size,*toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的披萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n Makeing a pizza whith the following toppings&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;- <span class="subst">&#123;topping&#125;</span>&quot;</span>)</span><br><span class="line">make_pizza(<span class="number">16</span>,<span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment">#位置实参</span></span><br><span class="line">make_pizza(<span class="number">15</span>,<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>) </span><br></pre></td></tr></table></figure><p>注意:你经常会看到通用形参名*args，它也收集任意数量的位置实参。</p><h4 id="使用任意数量的关键字实参">使用任意数量的关键字实参</h4><p>要接受任意数量的实参，但不知道给函数什么样的信息,将函数写成能接受任意数量的键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_profile</span>(<span class="params">first,last,**user_info</span>):   <span class="comment">#两个**代表创建一个空字典</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建一个字典，其中包括我们知道有关用户的一切&quot;&quot;&quot;</span></span><br><span class="line">    user_info[<span class="string">&#x27;first_name&#x27;</span>] = first</span><br><span class="line">    user_info[<span class="string">&#x27;last_name&#x27;</span>] = last</span><br><span class="line">    <span class="keyword">return</span> user_info     <span class="comment">#将上面的步骤返回给user_info字典</span></span><br><span class="line">user_profile= build_profile(<span class="string">&#x27;albert&#x27;</span>,<span class="string">&#x27;einstein&#x27;</span>,    <span class="comment">#将字典user_info给user_profile</span></span><br><span class="line">                           location = <span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">                           field = <span class="string">&#x27;physics&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user_profile)</span><br><span class="line"><span class="comment">#打印结果为</span></span><br><span class="line">&#123;<span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>, <span class="string">&#x27;field&#x27;</span>: <span class="string">&#x27;physics&#x27;</span>,<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>注意 :经常会看到形参名**kwargs，它用于收集任意数量的关键字实参。</p><h4 id="函数存储在模块中">函数存储在模块中</h4><p>函数优点之一式将代码块与主程序分离。通过给函数指定描述名称，可以让主程序更好理解。</p><p>还可以将函数存储在模块的独立文件，再将模块导入到主程序中。import来在程序中调用模块。</p><h4 id="导入整个模块">导入整个模块</h4><p>首先创建模块。模块是扩展名为.py的文件，包含要导入到程序中的代码。</p><p><a href="http://pizza.py">pizza.py</a> 中存储函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size,*toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的披萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n Makeing a pizza whith the following toppings&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;- <span class="subst">&#123;topping&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>making_pizzas.py中来调用模块中的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line"></span><br><span class="line">pizza.make_pizza(<span class="number">16</span>,<span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment">#位置实参</span></span><br><span class="line">pizza.make_pizza(<span class="number">15</span>,<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>) </span><br></pre></td></tr></table></figure><p>需要放在同一目录 调用时 模块名.函数名()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module_name.function_name()</span><br></pre></td></tr></table></figure><h4 id="导入特定的函数">导入特定的函数</h4><p>导入模块中的特定函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br><span class="line"><span class="comment">#从   模块         导入    特定函数</span></span><br></pre></td></tr></table></figure><p>用逗号分隔函数名，可导入任意数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0, function_1, function_2</span><br></pre></td></tr></table></figure><p>对于前面的making_pizzas.py示例，如果只想导入要使用的函数，代码将类似于下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza</span><br><span class="line">make_pizza(<span class="number">16</span>,<span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment">#位置实参</span></span><br><span class="line">make_pizza(<span class="number">15</span>,<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>) </span><br></pre></td></tr></table></figure><p>调用时无需再写模块名称</p><h4 id="使用as给函数指定别名">使用as给函数指定别名</h4><p>如果导入的函数与目前程序重复或者太长，可以用as给别名，也就是外号，在他导入时指定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp <span class="comment">#别名为mp</span></span><br><span class="line">mp(<span class="number">16</span>,<span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment">#位置实参</span></span><br><span class="line">mp(<span class="number">15</span>,<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>)</span><br></pre></td></tr></table></figure><p>调用时使用别名，通用语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> fn</span><br></pre></td></tr></table></figure><h4 id="用as给模块指定别名">用as给模块指定别名</h4><p>给模块指定简短别平，也能更轻松调用模块中的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p </span><br><span class="line">p.make_pizza(<span class="number">16</span>,<span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment">#位置实参</span></span><br><span class="line">p.make_pizza(<span class="number">15</span>,<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>)</span><br></pre></td></tr></table></figure><p>给模块指定别名通用语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure><h4 id="导入模块中的所有函数">导入模块中的所有函数</h4><p>用*运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br><span class="line">make_pizza(<span class="number">16</span>,<span class="string">&#x27;pepperoni&#x27;</span>) <span class="comment">#位置实参</span></span><br><span class="line">make_pizza(<span class="number">15</span>,<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>) </span><br></pre></td></tr></table></figure><p>无需用模块.法，因为导入了函数。直接用函数名调用。</p><p>如果不是自己编写的大型模块，不要采用此导入，因为可能会有很多函数与当前项目名称相同:</p><p>Python可能遇到多个名称相同的函数或变量，进而覆盖函数，而不是分别导入所有的函数。</p><p>所以最佳做法，要么导入需要使用的函数，要么导入整个模块用句点表示法。这种方法的通用语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h4 id="函数编写指南">函数编写指南</h4><p>应该给函数指定描述性名称，并且只在其中使用小写字母和下划线。给模块命名也应当遵守，能够帮助自己和别人能够明白这个代码/模块能够干什么</p><p>每个函数都需要简要阐述其功能的注释。注释紧跟在函数定义后面，用文档字符串格式也就是三引号法。在阅读文档字符串就能够知道功能，并且只要知道函数名称，以及需要的实参和返回值类型，就能够在自己的程序中使用它。</p><p>给形参指定默认值时，等号两边不要有空格:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">parameter_0, parameter_1=<span class="string">&#x27;default value&#x27;</span></span>)</span><br></pre></td></tr></table></figure><p>对于函数调用中的关键字实参，也应遵循这种约定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function_name(value_0, parameter_1=<span class="string">&#x27;value&#x27;</span>)</span><br></pre></td></tr></table></figure><p>PEP8 建议代码行的长度不要超过79字符，如果形参很多，在函数定义中像以下格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">                   <span class="comment">#一个左括号</span></span></span><br><span class="line"><span class="params">    parameter_0, parameter_1, parameter_2,    <span class="comment">#回车之后按两下TAB    </span></span></span><br><span class="line"><span class="params">    parameter_3, parameter_4, parameter_5</span>):</span><br><span class="line">function body...</span><br></pre></td></tr></table></figure><p>如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开，这样将更容易知道前一个函数在什么地方结束，下一个函数从什么地方开始。所有import语句都应放在文件开头。唯一例外的情形是，在文件开头使用了注释来描述整个程序。</p><p>注意:模块名不要用数字开头，在模块调用时会报错</p>]]></content>
    
    
    <summary type="html">Python学习</summary>
    
    
    
    <category term="Python" scheme="https://gogonine.cn/categories/Python/"/>
    
    
    <category term="学习" scheme="https://gogonine.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://gogonine.cn/posts/0.html"/>
    <id>https://gogonine.cn/posts/0.html</id>
    <published>2024-06-28T08:43:42.274Z</published>
    <updated>2024-07-01T13:27:52.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="游戏设计艺术">游戏设计艺术</h3><h4 id="游戏设计，即决定一款游戏应当有怎样的行为。">游戏设计，即决定一款游戏应当有怎样的行为。</h4><p>游戏设计就是一场冒险，而冒险一定要带地图。</p><p><strong>毕加索:</strong> 要创造，先毁灭。</p><p>若不失败，说明你不够努力。</p><p>最重要的技能为 <strong>倾听</strong>。</p><p><strong>倾听</strong></p><ol><li><strong>团队</strong></li><li><strong>受众</strong></li><li><strong>游戏</strong></li><li><strong>客户</strong></li><li><strong>自己</strong></li></ol><p>工作的爱=大天赋。</p><hr><h3 id="透镜1：情感">透镜1：情感</h3><p>当声音停止，时间停止。</p><p>游戏不等于体验，体验是想象的，是游玩中而获得的。通过人工的元素的影响来达到玩家体验。</p><p><strong>心理学:</strong>&quot;行为学，黑盒子研究&quot;即科学，现象学，反思。现象学的反思能作为工具。</p><p><strong>人类学:</strong> 研究人类及思想行为。文化人类学通过实地方式。也就是设身处地，在对方的位置中来理解。</p><p><strong>设计学:</strong> 各种种类的设计，起源于同一个地方，人类的大脑。尽可能接受外物，从各种领域的设计师上学习原则和案例。</p><h4 id="反思">反思</h4><p>对事物做出错误结论，也就是内心的感受与外在的现实矛盾。</p><ul><li>自己的体验不适用于他人，自己觉得好，别人不一定觉得好。</li></ul><h4 id="设计师的极端误区">设计师的极端误区</h4><p>只为与我一样的玩家设计，对于团队是巨大的打击。</p><ul><li>不能相信任何个人观点，只相信测试，而不相信自己的感觉，自己的决定。</li><li>解决方法：进行设身处地的练习。</li></ul><hr><h3 id="透镜2：本质体验">透镜2：本质体验</h3><p><strong>海森堡原理:</strong> 让玩家不观察自己，沉浸感。</p><p>元素和体验：障碍物或操作与体验之间需要有链接。也就是说，放大体验感和传输体验感，靠的是游戏内的元素。</p><p>虚拟的体验是真实的，游戏中的体验是能感觉到的真实的东西。</p><p>分析自己产生的体验。</p><hr><h3 id="透镜3：场景">透镜3：场景</h3><p><img src="https://gogonineru.asia//img/image-20240628164316906.png" alt="image-20240628164316906"></p><h4 id="私密">私密</h4><ul><li><strong>壁炉:</strong> Wii家庭游戏，客厅</li><li><strong>工作台:</strong> VR设备进入家庭时，由于紧张感和私密性，会更倾向于工作台，卧室。</li><li><strong>读书角:</strong> 平板、手机，沙发，床椅子</li></ul><p><strong>有关于锈湖白门的现实虚拟融合应用</strong></p><h4 id="公共场景-LBE-场地式娱乐">公共场景 LBE (场地式娱乐)</h4><ul><li><strong>剧院:</strong> 共同参与体验能够带来满足感。演出赛事。</li><li><strong>竞技场:</strong> 球场，输赢公共记录。技术和应用在工作台或者壁炉间，但思想已经到了竞技场。外围就是剧院----虚拟剧院。数字化竞技场，竞技类游戏。</li><li><strong>博物馆:</strong> 各种博物馆，以及新颖的地方。游览游戏展，街机游戏室。</li></ul><h4 id="半公共-半私人场景">半公共/半私人场景</h4><p>私密于公共开放之间。</p><ul><li><strong>游戏桌:</strong> 桌游厅，不会打断游戏的进食方式的地方。AR也许会进入到游戏桌这一部分。</li><li><strong>操场:</strong> 公共运动区域，锻炼与游玩并存。</li><li><strong>随时随地:</strong> 上班族专用，目前代表作星穹铁道。</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;游戏设计艺术&quot;&gt;游戏设计艺术&lt;/h3&gt;
&lt;h4 id=&quot;游戏设计，即决定一款游戏应当有怎样的行为。&quot;&gt;游戏设计，即决定一款游戏应当有怎样的行为。&lt;/h4&gt;
&lt;p&gt;游戏设计就是一场冒险，而冒险一定要带地图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;毕加索:&lt;/strong&gt; </summary>
      
    
    
    
    
  </entry>
  
</feed>
