<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gogonineru</title>
  
  
  <link href="https://gogonine.cn/atom.xml" rel="self"/>
  
  <link href="https://gogonine.cn/"/>
  <updated>2024-07-05T10:06:08.069Z</updated>
  <id>https://gogonine.cn/</id>
  
  <author>
    <name>Gogonineru</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python</title>
    <link href="https://gogonine.cn/posts/8bbfcc24.html"/>
    <id>https://gogonine.cn/posts/8bbfcc24.html</id>
    <published>2024-07-01T16:00:13.000Z</published>
    <updated>2024-07-05T10:06:08.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python">python</h2><p>为什么python可以省略掉;？</p><p>追求语言的简洁性与可读性。若要一行多个语句则可以用;来隔开。</p><p>本地部署chatgpt，等ai相关。</p><p>变量名的命名规则:</p><p>可以用字母下划线开头，数字不行。</p><p>不能包含空格。</p><p>关键字和函数名无法作为变量名。</p><p>慎用I与O，可能看作1与0。</p><p>字符串:</p><p>在python中用引号括起的都是字符串，单引号双引号都算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(变量名.title())</span><br><span class="line"><span class="comment">#将字符串&quot;变量名&quot;每个首字母变大写。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(变量名.upper())</span><br><span class="line"><span class="comment">#输出大写，同上。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(变量名.lower())</span><br><span class="line"><span class="comment">#相反，输出小写。</span></span><br></pre></td></tr></table></figure><p>f, format使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">first_name =<span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line"><span class="comment">#组合名字</span></span><br><span class="line"></span><br><span class="line">full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span><span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line"><span class="comment">#组合</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hello,<span class="subst">&#123;full_name.title()&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment">#组合输出  结果为 Hello,Ada Lovelace!</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">f&quot;hello,<span class="subst">&#123;full_name.title()&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment">#在变量中使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#总结</span></span><br><span class="line"><span class="comment">#使用f时候 组合变量需要加&#123;&#125;</span></span><br><span class="line"><span class="comment">#字符与变量组合时，如果变量中&#123;变量.titile()&#125;则字符也会使用到首字母大写的修改。</span></span><br></pre></td></tr></table></figure><p>制表符或换行符来添加空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\tPYTHON&quot;</span>)</span><br><span class="line"><span class="comment">#制表符 输出空一格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;PYTHON:\n112\n333&quot;</span>)</span><br><span class="line"><span class="comment">#换行符号 结果为 </span></span><br><span class="line"><span class="comment">#PYthon</span></span><br><span class="line"><span class="comment">#112</span></span><br><span class="line"><span class="comment">#333</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123\n\t412\n\t333&quot;</span>)</span><br><span class="line"><span class="comment">#输出会空行+换行 结果为</span></span><br><span class="line"><span class="comment"># 123</span></span><br><span class="line"><span class="comment"># 412</span></span><br><span class="line"><span class="comment"># 333</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除空白</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">language1 =&#x27;python&#x27;</span><br><span class="line">language2 =&#x27;python&#x27; </span><br><span class="line"><span class="punctuation">#</span><span class="keyword">python</span>会识别空格，无论前后。</span><br><span class="line"><span class="punctuation">#</span>利用rstrip()可以去除空格也就是将language2的值变为无空格的python</span><br><span class="line"><span class="punctuation">#</span>具体 language2.strip()结果就是无空格的&#x27;python&#x27;</span><br><span class="line"><span class="punctuation">#</span>但只是表面删除 只能用于下一步的操作而不是全局</span><br><span class="line"></span><br><span class="line"><span class="punctuation">#</span>要永久删除则需要关联到变量</span><br><span class="line"><span class="punctuation">#</span> language2=language2.rstrip()</span><br><span class="line"><span class="punctuation">#</span>就是让无空格的赋值盖掉之前的。</span><br><span class="line"><span class="punctuation">#</span>总结</span><br><span class="line"><span class="punctuation">#</span><span class="keyword">strip</span><span class="params">()</span>清除两边空格</span><br><span class="line"><span class="punctuation">#</span><span class="keyword">lstrip</span><span class="params">()</span>清除左侧</span><br><span class="line"><span class="punctuation">#</span><span class="keyword">rstrip</span><span class="params">()</span>清除右侧</span><br></pre></td></tr></table></figure><p>附加知识</p><p>可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \&quot; 字符串或赋值的变量字符串 \&quot; 来添加引号</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;  \txiaoshangle\n       dsoax         &quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.strip())</span><br><span class="line"><span class="comment">#\n后的内容是属于中间部分内容所以不会去除前面的空白</span></span><br></pre></td></tr></table></figure><p>数</p><p>**为次幂运算</p><p>浮点数</p><p>小数</p><p>整数与浮点数一起运算时，结果都为浮点数。</p><p>数中的下划线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="number">14_000_000</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"><span class="comment">#输出结果为14000000</span></span><br><span class="line"><span class="comment">#可以见_不会打印出，会直接忽略</span></span><br><span class="line"><span class="comment">#1000 也就是 1_000</span></span><br></pre></td></tr></table></figure><p>同时给多个变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x,y,z=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="comment">#用逗号隔开</span></span><br></pre></td></tr></table></figure><p>常量，其值在整个程序的生命周期内，保持不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MAX_CONNECTIONS=<span class="number">5000</span></span><br><span class="line"><span class="comment">#如果全大写指出某个变量视为常量</span></span><br><span class="line"><span class="comment">#那么值始终不变</span></span><br><span class="line"><span class="comment">#将特定的变量视为常量，那么可以将字母全大写</span></span><br></pre></td></tr></table></figure><p>注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向大家问好 用#注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">#只打印出hello</span></span><br></pre></td></tr></table></figure><p>Python之禅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输入import this </span></span><br><span class="line"><span class="comment">#优先选择简单</span></span><br><span class="line"><span class="comment">#复杂代码也许有易理解，编写有益的注释</span></span><br><span class="line"><span class="comment">#小问题存在于大空间，解决小问题的细节。</span></span><br><span class="line"><span class="comment">#编写能运行的代码，在决定对其进行修改或者是废除创新。而不是编写完美的代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Python 之禅，作者 Tim Peters</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 美胜于丑。</span></span><br><span class="line"><span class="string">   - 写代码要追求美感，代码应当简洁、优雅。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 清晰胜于隐晦。</span></span><br><span class="line"><span class="string">   - 代码应当清晰明了，避免晦涩难懂。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 简单胜于复杂。</span></span><br><span class="line"><span class="string">   - 能用简单的方法解决问题，就不要用复杂的方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 复杂胜于混乱。</span></span><br><span class="line"><span class="string">   - 有时候问题本身很复杂，但代码应当保持有序。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5. 扁平胜于嵌套。</span></span><br><span class="line"><span class="string">   - 代码结构应当扁平化，避免过多的嵌套。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6. 稀疏胜于密集。</span></span><br><span class="line"><span class="string">   - 代码应当适度分散，避免过于紧凑。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7. 可读性很重要。</span></span><br><span class="line"><span class="string">   - 代码应该易于阅读和理解。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8. 特殊情况不足以破例。</span></span><br><span class="line"><span class="string">   - 特殊情况不应违反这些规则。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9. 实用比纯粹更重要。</span></span><br><span class="line"><span class="string">   - 实用性比纯粹的优雅更重要。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">10. 错误不应悄无声息，除非明确需要。</span></span><br><span class="line"><span class="string">    - 错误不应被默默忽略，除非明确地进行处理。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11. 面对不明确，拒绝猜测。</span></span><br><span class="line"><span class="string">    - 遇到不明确的情况，不要随意猜测。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12. 应该有一个显而易见的解决方法，最好只有一个。</span></span><br><span class="line"><span class="string">    - 应该有一个清晰明确的解决方法，并且最好只有一个。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">13. 虽然这种方法一开始可能不明显，除非你是荷兰人。</span></span><br><span class="line"><span class="string">    - 这种方法可能一开始并不明显，除非你非常熟悉 Python。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">14. 现在做比不做好。</span></span><br><span class="line"><span class="string">    - 现在动手比什么都不做要好。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">15. 虽然有时不做比匆忙做好。</span></span><br><span class="line"><span class="string">    - 有时候不做比草率完成要好。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">16. 如果实现难以解释，那可能不是好主意。</span></span><br><span class="line"><span class="string">    - 如果代码难以解释，可能不是好主意。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">17. 如果实现容易解释，那可能是好主意。</span></span><br><span class="line"><span class="string">    - 如果代码容易解释，可能是好主意。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">18. 命名空间是个好主意，我们应该多用。</span></span><br><span class="line"><span class="string">    - 命名空间是个非常好的设计理念，我们应多加利用。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三章 列表</p><p>列表 由一系列按照特定顺序排列的元素组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line">用[]来表示列表，用,来分隔其中元素</span><br><span class="line"><span class="comment">#打印出来为[&#x27;trek&#x27;,&#x27;cannondale&#x27;] 包括所有</span></span><br></pre></td></tr></table></figure><p>访问列表元素 列表是有序集合，访问其中元素则需将索引告诉Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#输出结果为trek</span></span><br><span class="line"><span class="comment">#当然能结合字符串方法使用利用title()变为首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>].title())</span><br><span class="line"><span class="comment">#输出结果为Trek #0就为索引</span></span><br></pre></td></tr></table></figure><p>​索引从0开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#意思为列表中的第一个元素打印出来</span></span><br><span class="line"><span class="comment">#如果为[1]则是打印出第二个元素</span></span><br></pre></td></tr></table></figure><p>特殊索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#当索引为-1时，返回值为最后一个元素 -2则是返回倒数第二个元素</span></span><br><span class="line"><span class="comment">#如果没有元素-1则会报错</span></span><br></pre></td></tr></table></figure><p>使用列表值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="comment">#其中可以把trek这一看作为 bicycles[0]使用</span></span><br><span class="line">message = <span class="string">f&quot;我的第一台车是<span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>&quot;</span> <span class="comment">#类似变量的使用</span></span><br><span class="line"><span class="comment">#输出结果为我的第一台车为Trek</span></span><br></pre></td></tr></table></figure><p>修改列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要改变第一个元素</span></span><br><span class="line"><span class="comment">#则可以赋值新的</span></span><br><span class="line">bicycles[<span class="number">0</span>]=<span class="string">&#x27;aaa&#x27;</span> </span><br><span class="line"><span class="comment">#那么输出的bicycles[0]就变为了aaa,bicycles中的第一个元素也变为了aaa</span></span><br></pre></td></tr></table></figure><p>添加元素</p><p>末尾添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="comment">#则是在末尾添加了aaa，利用append</span></span><br><span class="line"><span class="comment">#bicycle中的元素[&#x27;trek&#x27;,&#x27;cannodale&#x27;,aaa]</span></span><br></pre></td></tr></table></figure><p>可以先创建个空列表在利用append()添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bike =[]</span><br><span class="line">bike.append(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">bike.append(<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (bike)</span><br><span class="line"><span class="comment">#结果为[&#x27;11&#x27;,22]</span></span><br></pre></td></tr></table></figure><p>插入元素 利用insert()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bike=[<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;22&#x27;</span>]</span><br><span class="line">bike.insert(<span class="number">0</span>,<span class="string">&#x27;33&#x27;</span>)</span><br><span class="line"><span class="comment">#输出结果为 [&#x27;33&#x27;,&#x27;11&#x27;,&#x27;22&#x27;]</span></span><br><span class="line"><span class="comment">#在索引0处添加空间并将33存储在索引0，将每个元素都右移了</span></span><br></pre></td></tr></table></figure><p>删除元素 并不使用 利用del</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bike现在元素为&#x27;33&#x27;,&#x27;11&#x27;,&#x27;22&#x27;</span></span><br><span class="line"><span class="comment">#删除&#x27;33&#x27;</span></span><br><span class="line"><span class="keyword">del</span> bike[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#删除索引[0]也就是第一个元素33 同理索引[1]则是删除11</span></span><br></pre></td></tr></table></figure><p>删除列表元素(弹出) 但是要用  利用pop()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bike=[<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;22&#x27;</span>]</span><br><span class="line">poped_bike=bike.pop(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#弹出索引[0]也就是&#x27;33&#x27;，并将弹出列表的值也就是33保存在poped_bike的变量中用来后面使用</span></span><br><span class="line"><span class="comment">#bike列表中就剩&#x27;11&#x27;&#x27;22&#x27;</span></span><br><span class="line"><span class="comment">#&#x27;33&#x27;则被变量poped_bike保存并可以继续使用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我想买一辆<span class="subst">&#123;poped_bike.title()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#任何元素都能被弹出 弹出索引[1]也就是弹出&#x27;11&#x27; 弹出之后列表中的元素就没有了</span></span><br></pre></td></tr></table></figure><p>根据值来删除元素</p><p>知道元素的值可以用remove()来删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bike=[<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;11&#x27;</span>]</span><br><span class="line"><span class="comment">#如果不知道索引位置那么可以直接用remove(元素的值)来删除</span></span><br><span class="line">bike.remove(<span class="string">&#x27;33&#x27;</span>)</span><br><span class="line">bike=[<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;11&#x27;</span>]</span><br><span class="line"><span class="comment">#remove()删除的元素的值还可以利用</span></span><br><span class="line"><span class="comment">#比如将&#x27;33&#x27;存储在a中</span></span><br><span class="line">a=<span class="string">&#x27;33&#x27;</span></span><br><span class="line">bike.remove(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我删除的元素是<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#注意事项</span></span><br><span class="line"><span class="comment">#只能删除出现的第一个值 如果列表为bike=[&#x27;33&#x27;,&#x27;33&#x27;]</span></span><br><span class="line"><span class="comment">#使用remove[&#x27;33&#x27;]则是删去最前面的值</span></span><br></pre></td></tr></table></figure><p>使用sort()对列表进行永久排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars =[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">cars.sort() <span class="comment">#按照字母顺序排序 永久性修改</span></span><br><span class="line"><span class="built_in">print</span>(cars)<span class="comment">#输出结果为&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><p>当然也能反向排序 用reverse=True也就是反向开启</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)<span class="comment">#逆向排序，同样也是永久性</span></span><br><span class="line"><span class="built_in">print</span>(cars)<span class="comment">#输出为&#x27;c&#x27;,&#x27;b&#x27;,&#x27;a&#x27; </span></span><br></pre></td></tr></table></figure><p>使用sorted()进行临时排序 当然也能用sorted(reverse=True)进行临时逆向</p><p>注意是内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#也就是只作用于下一个</span></span><br><span class="line">cars=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars,reverse=<span class="literal">True</span>) <span class="comment">#输出结果为&#x27;c&#x27;,&#x27;b&#x27;,&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">#再次打印 </span></span><br><span class="line"><span class="built_in">print</span>(cars)<span class="comment"># 输出结果则是&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27; 回到原来的排序</span></span><br><span class="line"><span class="comment">#如果  </span></span><br><span class="line"><span class="built_in">sorted</span>(cars,reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)<span class="comment">#没有进行逆向</span></span><br><span class="line"><span class="comment">#结果为&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><p>倒着打印用 reverse()也是永久性的 想要还原则在进行一次reverse()的转换</p><p>注意:并不是按照字母顺序排列，而是反向排列列表中的元素</p><p>所以说sort.(reverse=True)不等于reverse()，前者字母顺序逆排，而后者则是直接逆排</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment">#结果为&#x27;c&#x27;,&#x27;b&#x27;,&#x27;a&#x27;</span></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(casrs)<span class="comment">#输出结果则是&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><p>确定列表长度 也就是有几个元素</p><p>使用 len()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="built_in">len</span>(cars) <span class="comment">#输出为2</span></span><br></pre></td></tr></table></figure><p>第四章 操作列表</p><p>遍历整个列表 利用for</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians: <span class="comment">#获取&#x27;a&#x27;并与 magician关联</span></span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br><span class="line">    <span class="comment">#重复执行打印 从magicians中提出magician并且打印</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> cat <span class="keyword">in</span> cats:  <span class="comment">#从小猫列表中提取小猫</span></span><br></pre></td></tr></table></figure><p>for中执行更多操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#比如说 三辆车 都说非常好</span></span><br><span class="line">cars=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;car.title()&#125;</span>非常好&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;我忍不住想要骑<span class="subst">&#123;car.title()&#125;</span>\n&quot;</span>) <span class="comment">#在循环中</span></span><br><span class="line">    <span class="comment">#输出为</span></span><br><span class="line">    <span class="comment">#A非常好 我忍不住想要骑A</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#B非常好 我忍不住想要骑B</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#C非常好 我忍不住想要骑C</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这些车都非常好&quot;</span>) <span class="comment">#循环结束后 没缩进</span></span><br></pre></td></tr></table></figure><p>常见缩进错误</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for a in b</span></span><br><span class="line"><span class="comment">#print(a)</span></span><br><span class="line"><span class="comment">#for后print没缩进</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for a in b</span></span><br><span class="line"><span class="comment">#    print(a)</span></span><br><span class="line"><span class="comment">#print(f&quot;好&#123;a&#125;&quot;)</span></span><br><span class="line"><span class="comment">#忘记缩进第二行代码 导致只有print(a)进行了循环</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mes = <span class="string">&quot;ascx&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mes)</span><br><span class="line">    <span class="comment">#没必要的缩进 一般for后需要缩进</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for a in b</span></span><br><span class="line"><span class="comment">#   print(a)</span></span><br><span class="line"><span class="comment">#print(f&quot;好&#123;a&#125;&quot;)</span></span><br><span class="line"><span class="comment">#  print(&quot;非常好&quot;)   #循环之后没有必要的缩进</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for a in b   #漏了冒号</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>创建数值列表</p><p>存储各类数值 得分 温度等</p><p>使用range()   值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):  <span class="comment">#将range中的值传到变量value</span></span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment">#打印出 1,2,3,4 没有5   </span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment">#需要打印1~5则是range后要6</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment">#单独使用左边为0，所以是0~5</span></span><br></pre></td></tr></table></figure><p>list()与range()来创建 数字列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment">#创建一个1~5的数字列表</span></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"><span class="comment">#输出为[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p>可以指定步长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>)) <span class="comment">#1~10的偶数 从2开始+2导出</span></span><br><span class="line"><span class="built_in">print</span>(even_numbers)</span><br><span class="line"><span class="comment">#结果为[2,4,6,8,10]</span></span><br></pre></td></tr></table></figure><p>创建包含1~10的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares=[]</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">square=value**<span class="number">2</span> <span class="comment">#1~10每个数平方</span></span><br><span class="line">    squares.append(square) <span class="comment">#将平方的值传给squares列表</span></span><br><span class="line"><span class="built_in">print</span>(squares) <span class="comment">#打印出包含1~10平方的列表</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares=[]</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>)<span class="comment">#不需要用临时变量square</span></span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><p>对数字列表进行简单统计计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">digits=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line"><span class="built_in">min</span>（digits）<span class="comment">#最小</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="built_in">max</span>(digits)<span class="comment">#最大</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="built_in">sum</span>(digits)<span class="comment">#总和</span></span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure><p>列表解析 一行代码搞定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squres = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)] </span><br><span class="line"><span class="comment">#注意 for后面没有:, for value in range(1,11)是为了给value**提供value值</span></span><br><span class="line"><span class="built_in">print</span>(squares) <span class="comment">#打印出包含1~10平方的列表</span></span><br></pre></td></tr></table></figure><p>使用列表中的一部分，处理列表部分元素，称为切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">players= [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment">#打印出索引0到索引2的值</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>,<span class="number">3</span>]) <span class="comment">#打印出索引1到索引2的值</span></span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">3</span>]) <span class="comment">#打印出索引0到索引2的值 左侧没有默认为0</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:]) <span class="comment">#打印出索引2到索引末尾的值</span></span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:]) <span class="comment">#打印出最后三名队员</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>]) <span class="comment">#每隔两个提取一个 打印出索引0 索引2</span></span><br></pre></td></tr></table></figure><p>遍历切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">players= [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:  <span class="comment">#遍历出索引0~2 三位</span></span><br><span class="line">    <span class="built_in">print</span>(player.title())</span><br></pre></td></tr></table></figure><p>复制列表 利用[:]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">friend_foods=my_food[:] <span class="comment">#我喜欢的食物复制给我朋友</span></span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br><span class="line"></span><br><span class="line">my_food.append(<span class="string">&#x27;e&#x27;</span>) <span class="comment">#在我喜欢的添加到我 &#x27;a&#x27;b&#x27;c&#x27;e&#x27;</span></span><br><span class="line">friend_food.append(<span class="string">&#x27;f&#x27;</span>) <span class="comment">#朋友喜欢的添加到朋友&#x27;a&#x27;b&#x27;c&#x27;f&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(friend_food) <span class="comment">#能够正确打印</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">friend_foods=my_food <span class="comment">#这是不可行的 是将my_foods赋给了friend_foods 而不是副本</span></span><br><span class="line">my_foods.append(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">friend_foods.append(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="comment">#他们两可以看作在同一空间，同一物品，当其中一个改变，另一个也会随之改变 指向同一列表</span></span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br><span class="line">打印都为<span class="string">&#x27;a&#x27;</span><span class="string">&#x27;b&#x27;</span><span class="string">&#x27;c&#x27;</span><span class="string">&#x27;d&#x27;</span><span class="string">&#x27;e&#x27;</span></span><br></pre></td></tr></table></figure><p>元组 一系列不可修改的值称为不可变的，不可变的列表称为元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>) <span class="comment">#()而不是[]</span></span><br><span class="line"><span class="comment">#假如大小不可改变的矩形</span></span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) <span class="comment">#打印元组中索引0 也就为200</span></span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">dimensions[<span class="number">0</span>]=<span class="number">250</span> <span class="comment">#会直接报错，因为元组无法被修改</span></span><br><span class="line"></span><br><span class="line">my_t=(<span class="number">3</span>,) <span class="comment">#定义一个元组 必须要,</span></span><br></pre></td></tr></table></figure><p>遍历元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: <span class="comment">#像列表一样</span></span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure><p>修改元组 重新定义元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) <span class="comment">#为200</span></span><br><span class="line">demensions =(<span class="number">400</span>,<span class="number">50</span>) </span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) <span class="comment">#为400</span></span><br></pre></td></tr></table></figure><p>设置代码格式</p><p>PEP(python改进提案)</p><p>PEP 8 是最古老的PEP之一</p><p>易于阅读大于易于编写</p><p>缩进</p><p>PEP 8建议每级缩进都使用四个空格 提高了可读性 留下了空间</p><p>python对于缩进比较敏感，所以建议使用制表符键来缩进代码，但与空格的混用会导致python解释器出现问题。为解决，大多数编辑器提供将制表符转换为指定空格。避免混用问题。</p><p>行长</p><p>79字符标准行长  打开多个文件都能够阅读到</p><p>PEP 8建议注释的行长不应超过72字符 有些工具为大型项目生成文档时，会在每行注释开头添加格式化字符。</p><p>空行</p><p>也就是按下enter键，五行创建列表的代码，三行处理该列表的代码。中间可以用一个空行隔开最合适。不会影响代码运行，会影响可读性。</p><p>其他格式指南</p><p>PEP8还有更多其他格式的设置建议，但所针对的程序都更复杂。</p><p>空格是首选的缩进方法。</p><p>if语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car==<span class="string">&#x27;b&#x27;</span>  <span class="comment">#判断是否是b  是则输出B，不是则是小写a，c</span></span><br><span class="line">    <span class="built_in">print</span>(car.upper()) </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(car.lower())</span><br></pre></td></tr></table></figure><p>条件测试 True执行   false不执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">car=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">car==<span class="string">&#x27;b&#x27;</span>  <span class="comment">#检查car是否等于b，等于则输出True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">car==<span class="string">&#x27;a&#x27;</span> <span class="comment">#不等于 输出false</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment">#一个等号就是将car设置为b，两个等号就是问car是b吗？</span></span><br></pre></td></tr></table></figure><p>检查是否相等大小写的影响</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">car=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">car==<span class="string">&#x27;A&#x27;</span></span><br><span class="line">false        <span class="comment">#大小写视为不通值</span></span><br><span class="line">car.upper()==<span class="string">&#x27;A&#x27;</span>   <span class="comment">#将car中的值转化为大写 与A进行相等判断 网站判断用户名大小写</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>检查是否不相等 !=   其中感叹号为不</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">food=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">if</span> food!=<span class="string">&#x27;b&#x27;</span>:         <span class="comment">#不是b我不吃 为True输出我不吃</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我不吃&#x27;</span>)</span><br></pre></td></tr></table></figure><p>数值比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="number">18</span></span><br><span class="line">age==<span class="number">18</span>  <span class="comment">#检测是否18岁</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>不相等时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age !=<span class="number">19</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我不是18岁&#x27;</span>)</span><br></pre></td></tr></table></figure><p>条件语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包含&lt;,&gt; ,= ,&gt;= , &lt;=</span><br></pre></td></tr></table></figure><p>检查多个条件</p><p>两个为True整个为True用and</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age_0=<span class="number">22</span></span><br><span class="line">age_1=<span class="number">18</span></span><br><span class="line">age_0&gt;=age_1 <span class="keyword">and</span> age_0&gt;<span class="number">22</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">age_0==<span class="number">22</span> <span class="keyword">and</span> age_1&gt;=<span class="number">18</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment">#提高可读性</span></span><br><span class="line">(age_0==<span class="number">22</span>) <span class="keyword">and</span> (age_1)&gt;=<span class="number">18</span></span><br></pre></td></tr></table></figure><p>使用or检查</p><p>两个为False则为False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age_0=<span class="number">22</span></span><br><span class="line">age_1=<span class="number">18</span></span><br><span class="line">age_0&gt;=age_1 <span class="keyword">or</span> age_0&gt;<span class="number">22</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">age_0==<span class="number">22</span> <span class="keyword">and</span> age_1&gt;=<span class="number">18</span> <span class="comment">#一个为True直接为True</span></span><br><span class="line"><span class="literal">True</span> </span><br></pre></td></tr></table></figure><p>检查特定值是否在列表 in</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">car = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> car</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&#x27;e&#x27;</span> <span class="keyword">in</span> car</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>检查特定值不在在列表 not in</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">car = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;c&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> car</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&#x27;d&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> car</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;d&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> car:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有d这台车&quot;</span>)</span><br></pre></td></tr></table></figure><p>布尔表达式 要么为True，要么为False 记录条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">game_active = <span class="literal">True</span> <span class="comment">#游戏是否在运行</span></span><br><span class="line">can_edit = <span class="literal">False</span> <span class="comment">#用户是否能编辑特定内容</span></span><br></pre></td></tr></table></figure><p>条件测试理解 开始if</p><p>简单if</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional_test:     <span class="comment">#满足True 后do something</span></span><br><span class="line">    do something</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span> age&gt;=<span class="number">18</span>:     <span class="comment">#满足输出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you can go website&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;and can go sleep nightly&quot;</span>) <span class="comment">#缩进 也能加多个一起输出</span></span><br></pre></td></tr></table></figure><p>if-else语句  通过执行一个操作 没有通过则执行另一个操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span> age&gt;=<span class="number">18</span>:     </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you can go website&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:    <span class="comment">#也就是满足age &lt; 18</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you cant go website&quot;</span>)</span><br></pre></td></tr></table></figure><p>if elif else 超过两个情形时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">通过年龄段收费的游乐园</span><br><span class="line"><span class="number">4</span>岁以下免费 <span class="number">4</span>~<span class="number">18</span>岁收费<span class="number">25</span>元 <span class="number">18</span>岁以上收费<span class="number">40</span>元</span><br><span class="line">age=<span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age&lt;=<span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you are free&quot;</span>)</span><br><span class="line">    <span class="comment">#price=0</span></span><br><span class="line"><span class="keyword">elif</span> age&lt;<span class="number">18</span>: <span class="comment">#age&lt;=4不通过时运行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you cost 25 yuan&quot;</span>)</span><br><span class="line">    <span class="comment">#price=25</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;you cost 40 yuan&quot;</span>)</span><br><span class="line">    <span class="comment">#price=40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;你必须支付<span class="subst">&#123;price&#125;</span>元&quot;</span>)</span><br><span class="line"><span class="comment">#使用price效率更高</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>使用多个elif代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age&lt;<span class="number">4</span>:</span><br><span class="line">    price=<span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age&lt;<span class="number">18</span>:</span><br><span class="line">    price=<span class="number">25</span></span><br><span class="line"><span class="keyword">elif</span> age&lt;<span class="number">65</span>:</span><br><span class="line">    price=<span class="number">40</span></span><br><span class="line"><span class="keyword">else</span>:          <span class="comment">#对于65岁以上老人半价</span></span><br><span class="line">    price=<span class="number">20</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;你需要话费<span class="subst">&#123;price&#125;</span>元&quot;</span>)</span><br></pre></td></tr></table></figure><p>省略else 代码块 在一些情况下else可以省略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age&lt;<span class="number">4</span>:</span><br><span class="line">    price=<span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age&lt;<span class="number">18</span>:</span><br><span class="line">    price=<span class="number">25</span></span><br><span class="line"><span class="keyword">elif</span> age&lt;<span class="number">65</span>:</span><br><span class="line">    price=<span class="number">40</span></span><br><span class="line"><span class="keyword">elif</span> age&gt;=<span class="number">65</span>:          <span class="comment">#对于65岁以上老人半价 这样更好理解</span></span><br><span class="line">    price=<span class="number">20</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;你需要话费<span class="subst">&#123;price&#125;</span>元&quot;</span>)</span><br></pre></td></tr></table></figure><p>If-elif-else 用于只有一个条件要满足的情况。多个条件要满足则用if更好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">requested_food(<span class="string">&#x27;meat&#x27;</span>,<span class="string">&#x27;egg&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;meat&#x27;</span> <span class="keyword">in</span> requested_food:    <span class="comment">#总体检测而不是一步一步检测 同时进行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adding meat&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;beef&#x27;</span> <span class="keyword">in</span> requested_food:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adding beef&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;egg&#x27;</span> <span class="keyword">in</span> requested_food:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adding egg&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings:    <span class="comment">#条件满足则直接导出而不会进行下一步</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding mushrooms.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;pepperoni&#x27;</span> <span class="keyword">in</span> requested_toppings:    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding pepperoni.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;extra cheese&#x27;</span> <span class="keyword">in</span> requested_toppings:    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding extra cheese.&quot;</span>)<span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><p>if 来处理列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car==<span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有a了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;可以购买&#x27;</span>)</span><br></pre></td></tr></table></figure><p>确定列表不是空的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars=[]    <span class="comment">#空的列表会输出False</span></span><br><span class="line"><span class="keyword">if</span> cars:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;还有&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无了&#x27;</span>)    <span class="comment">#输出无了则是空</span></span><br></pre></td></tr></table></figure><p>使用多个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cars1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>] </span><br><span class="line">cars2 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]    <span class="comment">#所需要的</span></span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> car2:        <span class="comment">#遍历所需的</span></span><br><span class="line">    <span class="keyword">if</span> car <span class="keyword">in</span> car1:    <span class="comment">#如果car1列表中有car2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;有[car]&#x27;</span>) <span class="comment">#有a,b</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有&#x27;</span>)  <span class="comment">#因为没有e 所以打印没有</span></span><br></pre></td></tr></table></figure><p>设置 if语句格式</p><p>在比较运算符左右侧加空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br></pre></td></tr></table></figure><p>第六章 字典</p><p>简单的字典 用{} :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line"><span class="comment">#输出为green和5</span></span><br></pre></td></tr></table></figure><p>使用字典  一个键值对 一个键队一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">#其中 color为键 green为值  描述为颜色是绿色</span></span><br></pre></td></tr></table></figure><p>访问字典中的值 利用[键]来访问值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line">newalien_0 = alien_0[<span class="string">&#x27;color&#x27;</span>] <span class="comment">#用变量存储</span></span><br><span class="line"><span class="built_in">print</span>(newalien_0) <span class="comment">#输出为green</span></span><br></pre></td></tr></table></figure><p>添加键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>]=<span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>]=<span class="number">25</span>    <span class="comment">#[内的是键] = 值</span></span><br><span class="line"><span class="built_in">print</span>(alien_0) <span class="comment">#打印出alien_0 = &#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;points&#x27;:5,&#x27;x_position&#x27;:0,&#x27;y_position&#x27;:25&#125;</span></span><br></pre></td></tr></table></figure><p>创建空字典 再添加键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0=&#123;&#125;</span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>]=<span class="string">&#x27;green&#x27;</span></span><br><span class="line">alien_0[<span class="string">&#x27;point&#x27;</span>]=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>修改字典中的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>]=<span class="string">&#x27;yellow&#x27;</span> <span class="comment">#根据键去改</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)     <span class="comment">#&#123;&#x27;color&#x27;:&#x27;yellow&#x27;,&#x27;points&#x27;:5&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;x_position&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;y_position&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>&#125;  <span class="built_in">print</span>(<span class="string">f&quot;Original position: <span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)  <span class="comment"># 向右移动外星人。  </span></span><br><span class="line"><span class="comment"># 根据当前速度确定将外星人向右移动多远。</span></span><br><span class="line"><span class="keyword">if</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;slow&#x27;</span>:      </span><br><span class="line">    x_increment = <span class="number">1</span>  </span><br><span class="line"><span class="keyword">elif</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;medium&#x27;</span>:      </span><br><span class="line">    x_increment = <span class="number">2</span>  </span><br><span class="line"><span class="keyword">else</span>:            </span><br><span class="line">    x_increment = <span class="number">3</span>  </span><br><span class="line">    <span class="comment"># 新位置为旧位置加上移动距离。</span></span><br><span class="line">    alien_0[<span class="string">&#x27;x_position&#x27;</span>] = alien_0[<span class="string">&#x27;x_position&#x27;</span>] + x_increment  <span class="built_in">print</span>(<span class="string">f&quot;New position: <span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>删除键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">del</span> alien_0&#123;<span class="string">&#x27;points&#x27;</span>&#125;<span class="comment">#删除point键并且值也对应被删除</span></span><br></pre></td></tr></table></figure><p>类对象组成的字典 之前是存储一个对象(外星人)的多种信息</p><p>也能使用字典来存储众多对象的同一信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">favorite_language=&#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">&#125;      <span class="comment">#注意缩进</span></span><br><span class="line">lag = favorite_language[<span class="string">&#x27;b&#x27;</span>] <span class="comment">#利用变量存储 打印代码更简洁</span></span><br></pre></td></tr></table></figure><p>使用get()来访问值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>]) <span class="comment">#可见 alien_0中没有point这一键</span></span><br></pre></td></tr></table></figure><p>作用也就是来测试points存不存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">point_value = alien_0.get(<span class="string">&#x27;points&#x27;</span>, <span class="string">&#x27;No point value assigned.&#x27;</span>)</span><br><span class="line"><span class="comment">#使用get( , ) 前面为指定键，后者则为指定键不存在返回的值</span></span><br><span class="line"><span class="comment">#也就是不会直接报错 而是会返回这个不存在 后者不存在则会返回none</span></span><br><span class="line"><span class="comment">#如果有points那么不会返回</span></span><br><span class="line"><span class="built_in">print</span>(point_value)</span><br></pre></td></tr></table></figure><p>遍历字典</p><p>遍历所有键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;      </span><br><span class="line">   <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>,      </span><br><span class="line">   <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>,      </span><br><span class="line">   <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>,      </span><br><span class="line">&#125; </span><br><span class="line">   <span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items():   <span class="comment">#申明两个变量 key对应键，value对应值</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;\nKey: <span class="subst">&#123;key&#125;</span>&quot;</span>)           <span class="comment">#两个变量可以根据相应的键和值来修改</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;Value: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>遍历所有键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;      </span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>,      </span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>,      </span><br><span class="line">    <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>,      </span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> user_0:            <span class="comment">#直接一个变量 就能遍历键 </span></span><br><span class="line"> <span class="comment">#for key in user_0.keys():           #或者加一个.keys便于理解</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;\nKey: <span class="subst">&#123;key&#125;</span>&quot;</span>)       </span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> user_0.key():</span><br><span class="line">        <span class="built_in">print</span>()       <span class="comment"># 确实是否在字典中</span></span><br><span class="line"></span><br><span class="line">    uset_1&#123;<span class="string">&#x27;first&#x27;</span>:<span class="number">21</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> user_1:</span><br><span class="line">        <span class="built_in">print</span>()        <span class="comment"># 对于特定的键来打印</span></span><br></pre></td></tr></table></figure><p>按特定顺序遍历键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;    </span><br><span class="line">      <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">                      <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,    </span><br><span class="line">                      <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,   </span><br><span class="line">                      <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">                      &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.key()) 利用<span class="built_in">sorted</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>遍历所有值  利用.value()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;    </span><br><span class="line">      <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">                      <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,    </span><br><span class="line">                      <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,   </span><br><span class="line">                      <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">                      &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.value():     </span><br><span class="line">    <span class="built_in">print</span>(name)  <span class="comment">#遍历所有值</span></span><br></pre></td></tr></table></figure><p>没有考虑到重复 涉及多了则会有大量重复项,使用集合(set)。集合中每个元素都必须是独一无二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;    </span><br><span class="line">      <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">                      <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,    </span><br><span class="line">                      <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,   </span><br><span class="line">                      <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,    </span><br><span class="line">                      &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.value()):    <span class="comment">#利用set()来创建集合     </span></span><br><span class="line">    <span class="built_in">print</span>(name)  <span class="comment">#遍历所有值 利用set后没有重复语言结果为&#x27;python&#x27;,&#x27;c&#x27;,&#x27;ruby&#x27;</span></span><br></pre></td></tr></table></figure><p>可以用一对花括号直接创建集合，并在其中用逗号分隔元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">languages=&#123;<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(languages)  <span class="comment">#输出结果为&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure><p>嵌套</p><p>将字典存储在列表，或者将列表的值存储在字典，称为嵌套。</p><p>字典列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a_0=&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;point&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line">a_1=&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;point&#x27;</span>:<span class="number">10</span>&#125;</span><br><span class="line">a_2=&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;point&#x27;</span>:<span class="number">15</span>&#125;</span><br><span class="line">aliens = [a_0,a_1,a_2] <span class="comment">#用列表存储字典</span></span><br><span class="line"><span class="built_in">print</span>(aliens)</span><br><span class="line"><span class="comment">#结果为&#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;point&#x27;:5&#125;</span></span><br><span class="line"><span class="comment">#&#123;&#x27;color&#x27;:&#x27;yellow&#x27;,&#x27;point&#x27;:10&#125;</span></span><br><span class="line"><span class="comment">#&#123;&#x27;color&#x27;:&#x27;red&#x27;,&#x27;point&#x27;:15&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建存储外星人空列表</span></span><br><span class="line">aliens=[]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">    aliens.append(alien)  <span class="comment">#添加30个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(alien)  </span><br><span class="line"><span class="built_in">print</span>(&#123;<span class="built_in">len</span>(aliens)&#125;) 检查创建了多少个外星人</span><br></pre></td></tr></table></figure><p>每个外星人都是独立的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aliens=[]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">    aliens.append(alien)  <span class="comment">#添加30个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">3</span>]:  <span class="comment">#更改前三个星人的键值</span></span><br><span class="line">    <span class="keyword">if</span> alien[<span class="string">&#x27;color&#x27;</span>]=<span class="string">&#x27;green&#x27;</span>:     <span class="comment">#颜色是绿色的则修改</span></span><br><span class="line">        alien[<span class="string">&#x27;color&#x27;</span>]=<span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;speed&#x27;</span>]=<span class="string">&#x27;medium&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;points&#x27;</span>]=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>在字典中存储列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存储所点披萨的信息。</span></span><br><span class="line">pizza=&#123;</span><br><span class="line">    <span class="string">&#x27;crust&#x27;</span>:<span class="string">&#x27;thick&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;toppings&#x27;</span>:[<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]  <span class="comment">#列表</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(topping) <span class="comment">#打印出mushrooms,extrachess</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;         </span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>],      </span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>],      </span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: [<span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;go&#x27;</span>],      </span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;haskell&#x27;</span>],      <span class="comment">#使用列表存储值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():              <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;name.title()&#125;</span>&#x27;s favorite languages are:&quot;</span>)   <span class="comment">#打印</span></span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> languages:          <span class="comment">#从字典中的值提取 </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\t<span class="subst">&#123;language.title()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Python学习</summary>
    
    
    
    <category term="Python" scheme="https://gogonine.cn/categories/Python/"/>
    
    
    <category term="学习" scheme="https://gogonine.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://gogonine.cn/posts/0.html"/>
    <id>https://gogonine.cn/posts/0.html</id>
    <published>2024-06-28T08:43:42.274Z</published>
    <updated>2024-07-01T13:27:52.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="游戏设计艺术">游戏设计艺术</h3><h4 id="游戏设计，即决定一款游戏应当有怎样的行为。">游戏设计，即决定一款游戏应当有怎样的行为。</h4><p>游戏设计就是一场冒险，而冒险一定要带地图。</p><p><strong>毕加索:</strong> 要创造，先毁灭。</p><p>若不失败，说明你不够努力。</p><p>最重要的技能为 <strong>倾听</strong>。</p><p><strong>倾听</strong></p><ol><li><strong>团队</strong></li><li><strong>受众</strong></li><li><strong>游戏</strong></li><li><strong>客户</strong></li><li><strong>自己</strong></li></ol><p>工作的爱=大天赋。</p><hr><h3 id="透镜1：情感">透镜1：情感</h3><p>当声音停止，时间停止。</p><p>游戏不等于体验，体验是想象的，是游玩中而获得的。通过人工的元素的影响来达到玩家体验。</p><p><strong>心理学:</strong>&quot;行为学，黑盒子研究&quot;即科学，现象学，反思。现象学的反思能作为工具。</p><p><strong>人类学:</strong> 研究人类及思想行为。文化人类学通过实地方式。也就是设身处地，在对方的位置中来理解。</p><p><strong>设计学:</strong> 各种种类的设计，起源于同一个地方，人类的大脑。尽可能接受外物，从各种领域的设计师上学习原则和案例。</p><h4 id="反思">反思</h4><p>对事物做出错误结论，也就是内心的感受与外在的现实矛盾。</p><ul><li>自己的体验不适用于他人，自己觉得好，别人不一定觉得好。</li></ul><h4 id="设计师的极端误区">设计师的极端误区</h4><p>只为与我一样的玩家设计，对于团队是巨大的打击。</p><ul><li>不能相信任何个人观点，只相信测试，而不相信自己的感觉，自己的决定。</li><li>解决方法：进行设身处地的练习。</li></ul><hr><h3 id="透镜2：本质体验">透镜2：本质体验</h3><p><strong>海森堡原理:</strong> 让玩家不观察自己，沉浸感。</p><p>元素和体验：障碍物或操作与体验之间需要有链接。也就是说，放大体验感和传输体验感，靠的是游戏内的元素。</p><p>虚拟的体验是真实的，游戏中的体验是能感觉到的真实的东西。</p><p>分析自己产生的体验。</p><hr><h3 id="透镜3：场景">透镜3：场景</h3><p><img src="https://gogonineru.asia//img/image-20240628164316906.png" alt="image-20240628164316906"></p><h4 id="私密">私密</h4><ul><li><strong>壁炉:</strong> Wii家庭游戏，客厅</li><li><strong>工作台:</strong> VR设备进入家庭时，由于紧张感和私密性，会更倾向于工作台，卧室。</li><li><strong>读书角:</strong> 平板、手机，沙发，床椅子</li></ul><p><strong>有关于锈湖白门的现实虚拟融合应用</strong></p><h4 id="公共场景-LBE-场地式娱乐">公共场景 LBE (场地式娱乐)</h4><ul><li><strong>剧院:</strong> 共同参与体验能够带来满足感。演出赛事。</li><li><strong>竞技场:</strong> 球场，输赢公共记录。技术和应用在工作台或者壁炉间，但思想已经到了竞技场。外围就是剧院----虚拟剧院。数字化竞技场，竞技类游戏。</li><li><strong>博物馆:</strong> 各种博物馆，以及新颖的地方。游览游戏展，街机游戏室。</li></ul><h4 id="半公共-半私人场景">半公共/半私人场景</h4><p>私密于公共开放之间。</p><ul><li><strong>游戏桌:</strong> 桌游厅，不会打断游戏的进食方式的地方。AR也许会进入到游戏桌这一部分。</li><li><strong>操场:</strong> 公共运动区域，锻炼与游玩并存。</li><li><strong>随时随地:</strong> 上班族专用，目前代表作星穹铁道。</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;游戏设计艺术&quot;&gt;游戏设计艺术&lt;/h3&gt;
&lt;h4 id=&quot;游戏设计，即决定一款游戏应当有怎样的行为。&quot;&gt;游戏设计，即决定一款游戏应当有怎样的行为。&lt;/h4&gt;
&lt;p&gt;游戏设计就是一场冒险，而冒险一定要带地图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;毕加索:&lt;/strong&gt; </summary>
      
    
    
    
    
  </entry>
  
</feed>
