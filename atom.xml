<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gogonineru</title>
  
  
  <link href="https://gogonine.cn/atom.xml" rel="self"/>
  
  <link href="https://gogonine.cn/"/>
  <updated>2024-07-02T05:33:18.558Z</updated>
  <id>https://gogonine.cn/</id>
  
  <author>
    <name>Gogonineru</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python</title>
    <link href="https://gogonine.cn/posts/8bbfcc24.html"/>
    <id>https://gogonine.cn/posts/8bbfcc24.html</id>
    <published>2024-07-01T16:00:13.000Z</published>
    <updated>2024-07-02T05:33:18.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>为什么python可以省略掉;？</p><p>追求语言的简洁性与可读性。若要一行多个语句则可以用;来隔开。</p><p>本地部署chatgpt，等ai相关。</p><p>变量名的命名规则:</p><p>可以用字母下划线开头，数字不行。</p><p>不能包含空格。</p><p>关键字和函数名无法作为变量名。</p><p>慎用I与O，可能看作1与0。</p><p>字符串:</p><p>在python中用引号括起的都是字符串，单引号双引号都算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(变量名.title())</span><br><span class="line"><span class="comment">#将字符串&quot;变量名&quot;每个首字母变大写。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(变量名.upper())</span><br><span class="line"><span class="comment">#输出大写，同上。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(变量名.lower())</span><br><span class="line"><span class="comment">#相反，输出小写。</span></span><br></pre></td></tr></table></figure><p>f, format使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">first_name =<span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line"><span class="comment">#组合名字</span></span><br><span class="line"></span><br><span class="line">full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span><span class="subst">&#123;last_name&#125;</span>&quot;</span></span><br><span class="line"><span class="comment">#组合</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hello,<span class="subst">&#123;full_name.title()&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment">#组合输出  结果为 Hello,Ada Lovelace!</span></span><br><span class="line"></span><br><span class="line">message = <span class="string">f&quot;hello,<span class="subst">&#123;full_name.title()&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment">#在变量中使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#总结</span></span><br><span class="line"><span class="comment">#使用f时候 组合变量需要加&#123;&#125;</span></span><br><span class="line"><span class="comment">#字符与变量组合时，如果变量中&#123;变量.titile()&#125;则字符也会使用到首字母大写的修改。</span></span><br></pre></td></tr></table></figure><p>制表符或换行符来添加空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\tPYTHON&quot;</span>)</span><br><span class="line"><span class="comment">#制表符 输出空一格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;PYTHON:\n112\n333&quot;</span>)</span><br><span class="line"><span class="comment">#换行符号 结果为 </span></span><br><span class="line"><span class="comment">#PYthon</span></span><br><span class="line"><span class="comment">#112</span></span><br><span class="line"><span class="comment">#333</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123\n\t412\n\t333&quot;</span>)</span><br><span class="line"><span class="comment">#输出会空行+换行 结果为</span></span><br><span class="line"><span class="comment"># 123</span></span><br><span class="line"><span class="comment"># 412</span></span><br><span class="line"><span class="comment"># 333</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除空白</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">language1 =&#x27;python&#x27;</span><br><span class="line">language2 =&#x27;python&#x27; </span><br><span class="line"><span class="punctuation">#</span><span class="keyword">python</span>会识别空格，无论前后。</span><br><span class="line"><span class="punctuation">#</span>利用rstrip()可以去除空格也就是将language2的值变为无空格的python</span><br><span class="line"><span class="punctuation">#</span>具体 language2.strip()结果就是无空格的&#x27;python&#x27;</span><br><span class="line"><span class="punctuation">#</span>但只是表面删除 只能用于下一步的操作而不是全局</span><br><span class="line"></span><br><span class="line"><span class="punctuation">#</span>要永久删除则需要关联到变量</span><br><span class="line"><span class="punctuation">#</span> language2=language2.rstrip()</span><br><span class="line"><span class="punctuation">#</span>就是让无空格的赋值盖掉之前的。</span><br><span class="line"><span class="punctuation">#</span>总结</span><br><span class="line"><span class="punctuation">#</span><span class="keyword">strip</span><span class="params">()</span>清除两边空格</span><br><span class="line"><span class="punctuation">#</span><span class="keyword">lstrip</span><span class="params">()</span>清除左侧</span><br><span class="line"><span class="punctuation">#</span><span class="keyword">rstrip</span><span class="params">()</span>清除右侧</span><br></pre></td></tr></table></figure><p>附加知识</p><p>可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \&quot; 字符串或赋值的变量字符串 \&quot; 来添加引号</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;  \txiaoshangle\n       dsoax         &quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.strip())</span><br><span class="line"><span class="comment">#\n后的内容是属于中间部分内容所以不会去除前面的空白</span></span><br></pre></td></tr></table></figure><p>数</p><p>**为次幂运算</p><p>浮点数</p><p>小数</p><p>整数与浮点数一起运算时，结果都为浮点数。</p><p>数中的下划线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="number">14_000_000</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"><span class="comment">#输出结果为14000000</span></span><br><span class="line"><span class="comment">#可以见_不会打印出，会直接忽略</span></span><br><span class="line"><span class="comment">#1000 也就是 1_000</span></span><br></pre></td></tr></table></figure><p>同时给多个变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x,y,z=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="comment">#用逗号隔开</span></span><br></pre></td></tr></table></figure><p>常量，其值在整个程序的生命周期内，保持不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MAX_CONNECTIONS=<span class="number">5000</span></span><br><span class="line"><span class="comment">#如果全大写指出某个变量视为常量</span></span><br><span class="line"><span class="comment">#那么值始终不变</span></span><br><span class="line"><span class="comment">#将特定的变量视为常量，那么可以将字母全大写</span></span><br></pre></td></tr></table></figure><p>注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向大家问好 用#注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">#只打印出hello</span></span><br></pre></td></tr></table></figure><p>Python之禅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输入import this </span></span><br><span class="line"><span class="comment">#优先选择简单</span></span><br><span class="line"><span class="comment">#复杂代码也许有易理解，编写有益的注释</span></span><br><span class="line"><span class="comment">#小问题存在于大空间，解决小问题的细节。</span></span><br><span class="line"><span class="comment">#编写能运行的代码，在决定对其进行修改或者是废除创新。而不是编写完美的代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Python 之禅，作者 Tim Peters</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 美胜于丑。</span></span><br><span class="line"><span class="string">   - 写代码要追求美感，代码应当简洁、优雅。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 清晰胜于隐晦。</span></span><br><span class="line"><span class="string">   - 代码应当清晰明了，避免晦涩难懂。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 简单胜于复杂。</span></span><br><span class="line"><span class="string">   - 能用简单的方法解决问题，就不要用复杂的方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 复杂胜于混乱。</span></span><br><span class="line"><span class="string">   - 有时候问题本身很复杂，但代码应当保持有序。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5. 扁平胜于嵌套。</span></span><br><span class="line"><span class="string">   - 代码结构应当扁平化，避免过多的嵌套。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6. 稀疏胜于密集。</span></span><br><span class="line"><span class="string">   - 代码应当适度分散，避免过于紧凑。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7. 可读性很重要。</span></span><br><span class="line"><span class="string">   - 代码应该易于阅读和理解。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8. 特殊情况不足以破例。</span></span><br><span class="line"><span class="string">   - 特殊情况不应违反这些规则。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9. 实用比纯粹更重要。</span></span><br><span class="line"><span class="string">   - 实用性比纯粹的优雅更重要。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">10. 错误不应悄无声息，除非明确需要。</span></span><br><span class="line"><span class="string">    - 错误不应被默默忽略，除非明确地进行处理。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11. 面对不明确，拒绝猜测。</span></span><br><span class="line"><span class="string">    - 遇到不明确的情况，不要随意猜测。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12. 应该有一个显而易见的解决方法，最好只有一个。</span></span><br><span class="line"><span class="string">    - 应该有一个清晰明确的解决方法，并且最好只有一个。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">13. 虽然这种方法一开始可能不明显，除非你是荷兰人。</span></span><br><span class="line"><span class="string">    - 这种方法可能一开始并不明显，除非你非常熟悉 Python。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">14. 现在做比不做好。</span></span><br><span class="line"><span class="string">    - 现在动手比什么都不做要好。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">15. 虽然有时不做比匆忙做好。</span></span><br><span class="line"><span class="string">    - 有时候不做比草率完成要好。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">16. 如果实现难以解释，那可能不是好主意。</span></span><br><span class="line"><span class="string">    - 如果代码难以解释，可能不是好主意。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">17. 如果实现容易解释，那可能是好主意。</span></span><br><span class="line"><span class="string">    - 如果代码容易解释，可能是好主意。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">18. 命名空间是个好主意，我们应该多用。</span></span><br><span class="line"><span class="string">    - 命名空间是个非常好的设计理念，我们应多加利用。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三章列表</p><p>列表 由一系列按照特定顺序排列的元素组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line">用[]来表示列表，用,来分隔其中元素</span><br><span class="line"><span class="comment">#打印出来为[&#x27;trek&#x27;,&#x27;cannondale&#x27;] 包括所有</span></span><br></pre></td></tr></table></figure><p>访问列表元素 列表是有序集合，访问其中元素则需将索引告诉Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#输出结果为trek</span></span><br><span class="line"><span class="comment">#当然能结合字符串方法使用利用title()变为首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>].title())</span><br><span class="line"><span class="comment">#输出结果为Trek #0就为索引</span></span><br></pre></td></tr></table></figure><p>索引从0开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#意思为列表中的第一个元素打印出来</span></span><br><span class="line"><span class="comment">#如果为[1]则是打印出第二个元素</span></span><br></pre></td></tr></table></figure><p>特殊索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#当索引为-1时，返回值为最后一个元素 -2则是返回倒数第二个元素</span></span><br></pre></td></tr></table></figure><p>使用列表值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>]</span><br><span class="line"><span class="comment">#其中可以把trek这一看作为 bicycles[0]使用</span></span><br><span class="line">message = <span class="string">f&quot;我的第一台车是<span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>&quot;</span> <span class="comment">#类似变量的使用</span></span><br><span class="line"><span class="comment">#输出结果为我的第一台车为Trek</span></span><br></pre></td></tr></table></figure><p>修改列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要改变第一个元素</span></span><br><span class="line"><span class="comment">#则可以赋值新的</span></span><br><span class="line">bicycles[<span class="number">0</span>]=<span class="string">&#x27;aaa&#x27;</span> </span><br><span class="line"><span class="comment">#那么输出的bicycles[0]就变为了aaa,bicycles中的第一个元素也变为了aaa</span></span><br></pre></td></tr></table></figure><p>添加元素</p><p>末尾添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles.append(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="comment">#则是在末尾添加了aaa，利用append</span></span><br><span class="line"><span class="comment">#bicycle中的元素[&#x27;trek&#x27;,&#x27;cannodale&#x27;,aaa]</span></span><br></pre></td></tr></table></figure><p>可以先创建个空列表在利用append()添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bike =[]</span><br><span class="line">bike.append(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">bike.append(<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (bike)</span><br><span class="line"><span class="comment">#结果为[&#x27;11&#x27;,22]</span></span><br></pre></td></tr></table></figure><p>插入元素 利用inser()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bike=[<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;22&#x27;</span>]</span><br><span class="line">bike.insert(<span class="number">0</span>,<span class="string">&#x27;33&#x27;</span>)</span><br><span class="line"><span class="comment">#输出结果为 [&#x27;33&#x27;,&#x27;11&#x27;,&#x27;22&#x27;]</span></span><br><span class="line"><span class="comment">#在索引0处添加空间并将33存储在索引0，将每个元素都右移了</span></span><br></pre></td></tr></table></figure><p>删除元素 并不使用 利用del</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bike现在元素为&#x27;33&#x27;,&#x27;11&#x27;,&#x27;22&#x27;</span></span><br><span class="line"><span class="comment">#删除&#x27;33&#x27;</span></span><br><span class="line"><span class="keyword">del</span> bike[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#删除索引[0]也就是第一个元素33 同理索引[1]则是删除11</span></span><br></pre></td></tr></table></figure><p>删除列表元素(弹出) 但是要用  利用pop()  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bike=[<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;22&#x27;</span>]</span><br><span class="line">poped_bike=bike.pop(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#弹出索引[0]也就是&#x27;33&#x27;，并将弹出列表的值也就是33保存在poped_bike的变量中用来后面使用</span></span><br><span class="line"><span class="comment">#bike列表中就剩&#x27;11&#x27;&#x27;22&#x27;</span></span><br><span class="line"><span class="comment">#&#x27;33&#x27;则被变量poped_bike保存并可以继续使用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我想买一辆<span class="subst">&#123;poped_bike.title()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#任何元素都能被弹出 弹出索引[1]也就是弹出&#x27;11&#x27; 弹出之后列表中的元素就没有了</span></span><br></pre></td></tr></table></figure><p>根据值来删除元素</p><p>知道元素的值可以用remove()来删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bike=[<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;11&#x27;</span>]</span><br><span class="line"><span class="comment">#如果不知道索引位置那么可以直接用remove(元素的值)来删除</span></span><br><span class="line">bike.remove(<span class="string">&#x27;33&#x27;</span>)</span><br><span class="line">bike=[<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;11&#x27;</span>]</span><br><span class="line"><span class="comment">#remove()删除的元素的值还可以利用</span></span><br><span class="line"><span class="comment">#比如将&#x27;33&#x27;存储在a中</span></span><br><span class="line">a=<span class="string">&#x27;33&#x27;</span></span><br><span class="line">bike.remove(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我删除的元素是<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#注意事项</span></span><br><span class="line"><span class="comment">#只能删除出现的第一个值 如果列表为bike=[&#x27;33&#x27;,&#x27;33&#x27;]</span></span><br><span class="line"><span class="comment">#使用remove[&#x27;33&#x27;]则是删去最前面的值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Python学习</summary>
    
    
    
    <category term="Python" scheme="https://gogonine.cn/categories/Python/"/>
    
    
    <category term="学习" scheme="https://gogonine.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://gogonine.cn/posts/0.html"/>
    <id>https://gogonine.cn/posts/0.html</id>
    <published>2024-06-28T08:43:42.274Z</published>
    <updated>2024-07-01T13:27:52.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="游戏设计艺术"><a href="#游戏设计艺术" class="headerlink" title="游戏设计艺术"></a>游戏设计艺术</h3><h4 id="游戏设计，即决定一款游戏应当有怎样的行为。"><a href="#游戏设计，即决定一款游戏应当有怎样的行为。" class="headerlink" title="游戏设计，即决定一款游戏应当有怎样的行为。"></a>游戏设计，即决定一款游戏应当有怎样的行为。</h4><p>游戏设计就是一场冒险，而冒险一定要带地图。</p><p><strong>毕加索:</strong> 要创造，先毁灭。</p><p>若不失败，说明你不够努力。</p><p>最重要的技能为 <strong>倾听</strong>。</p><p> <strong>倾听</strong></p><ol><li><strong>团队</strong></li><li><strong>受众</strong></li><li><strong>游戏</strong></li><li><strong>客户</strong></li><li><strong>自己</strong></li></ol><p>工作的爱=大天赋。</p><hr><h3 id="透镜1：情感"><a href="#透镜1：情感" class="headerlink" title="透镜1：情感"></a>透镜1：情感</h3><p>当声音停止，时间停止。</p><p>游戏不等于体验，体验是想象的，是游玩中而获得的。通过人工的元素的影响来达到玩家体验。</p><p><strong>心理学:</strong>“行为学，黑盒子研究”即科学，现象学，反思。现象学的反思能作为工具。</p><p><strong>人类学:</strong> 研究人类及思想行为。文化人类学通过实地方式。也就是设身处地，在对方的位置中来理解。</p><p><strong>设计学:</strong> 各种种类的设计，起源于同一个地方，人类的大脑。尽可能接受外物，从各种领域的设计师上学习原则和案例。</p><h4 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h4><p>对事物做出错误结论，也就是内心的感受与外在的现实矛盾。</p><ul><li>自己的体验不适用于他人，自己觉得好，别人不一定觉得好。</li></ul><h4 id="设计师的极端误区"><a href="#设计师的极端误区" class="headerlink" title="设计师的极端误区"></a>设计师的极端误区</h4><p>只为与我一样的玩家设计，对于团队是巨大的打击。</p><ul><li>不能相信任何个人观点，只相信测试，而不相信自己的感觉，自己的决定。</li><li>解决方法：进行设身处地的练习。</li></ul><hr><h3 id="透镜2：本质体验"><a href="#透镜2：本质体验" class="headerlink" title="透镜2：本质体验"></a>透镜2：本质体验</h3><p><strong>海森堡原理:</strong> 让玩家不观察自己，沉浸感。</p><p>元素和体验：障碍物或操作与体验之间需要有链接。也就是说，放大体验感和传输体验感，靠的是游戏内的元素。</p><p>虚拟的体验是真实的，游戏中的体验是能感觉到的真实的东西。</p><p>分析自己产生的体验。</p><hr><h3 id="透镜3：场景"><a href="#透镜3：场景" class="headerlink" title="透镜3：场景"></a>透镜3：场景</h3><p><img src="https://gogonineru.asia//img/image-20240628164316906.png" alt="image-20240628164316906"></p><h4 id="私密"><a href="#私密" class="headerlink" title="私密"></a>私密</h4><ul><li><strong>壁炉:</strong> Wii家庭游戏，客厅</li><li><strong>工作台:</strong> VR设备进入家庭时，由于紧张感和私密性，会更倾向于工作台，卧室。</li><li><strong>读书角:</strong> 平板、手机，沙发，床椅子</li></ul><p><strong>有关于锈湖白门的现实虚拟融合应用</strong></p><h4 id="公共场景-LBE-场地式娱乐"><a href="#公共场景-LBE-场地式娱乐" class="headerlink" title="公共场景 LBE (场地式娱乐)"></a>公共场景 LBE (场地式娱乐)</h4><ul><li><strong>剧院:</strong> 共同参与体验能够带来满足感。演出赛事。</li><li><strong>竞技场:</strong> 球场，输赢公共记录。技术和应用在工作台或者壁炉间，但思想已经到了竞技场。外围就是剧院——虚拟剧院。数字化竞技场，竞技类游戏。</li><li><strong>博物馆:</strong> 各种博物馆，以及新颖的地方。游览游戏展，街机游戏室。</li></ul><h4 id="半公共-半私人场景"><a href="#半公共-半私人场景" class="headerlink" title="半公共/半私人场景"></a>半公共/半私人场景</h4><p>私密于公共开放之间。</p><ul><li><strong>游戏桌:</strong> 桌游厅，不会打断游戏的进食方式的地方。AR也许会进入到游戏桌这一部分。</li><li><strong>操场:</strong> 公共运动区域，锻炼与游玩并存。</li><li><strong>随时随地:</strong> 上班族专用，目前代表作星穹铁道。</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;游戏设计艺术&quot;&gt;&lt;a href=&quot;#游戏设计艺术&quot; class=&quot;headerlink&quot; title=&quot;游戏设计艺术&quot;&gt;&lt;/a&gt;游戏设计艺术&lt;/h3&gt;&lt;h4 id=&quot;游戏设计，即决定一款游戏应当有怎样的行为。&quot;&gt;&lt;a href=&quot;#游戏设计，即决定一款游戏应当有怎</summary>
      
    
    
    
    
  </entry>
  
</feed>
